
Guider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00001560  00001614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001560  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800198  00800198  000016ac  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  000016ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bc4  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b04  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001903  00000000  00000000  00005182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  00006a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b54  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002055  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000a139  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	e5 c3       	rjmp	.+1994   	; 0x7d0 <__vector_1>
       6:	00 00       	nop
       8:	ed c3       	rjmp	.+2010   	; 0x7e4 <__vector_2>
       a:	00 00       	nop
       c:	f5 c3       	rjmp	.+2026   	; 0x7f8 <__vector_3>
       e:	00 00       	nop
      10:	fd c3       	rjmp	.+2042   	; 0x80c <__vector_4>
      12:	00 00       	nop
      14:	05 c4       	rjmp	.+2058   	; 0x820 <__vector_5>
      16:	00 00       	nop
      18:	0d c4       	rjmp	.+2074   	; 0x834 <__vector_6>
      1a:	00 00       	nop
      1c:	15 c4       	rjmp	.+2090   	; 0x848 <__vector_7>
      1e:	00 00       	nop
      20:	1d c4       	rjmp	.+2106   	; 0x85c <__vector_8>
      22:	00 00       	nop
      24:	25 c4       	rjmp	.+2122   	; 0x870 <__vector_9>
      26:	00 00       	nop
      28:	2d c4       	rjmp	.+2138   	; 0x884 <__vector_10>
      2a:	00 00       	nop
      2c:	35 c4       	rjmp	.+2154   	; 0x898 <__vector_11>
      2e:	00 00       	nop
      30:	3d c4       	rjmp	.+2170   	; 0x8ac <__vector_12>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__vector_13>
      36:	00 00       	nop
      38:	4d c4       	rjmp	.+2202   	; 0x8d4 <__vector_14>
      3a:	00 00       	nop
      3c:	55 c4       	rjmp	.+2218   	; 0x8e8 <__vector_15>
      3e:	00 00       	nop
      40:	b8 c4       	rjmp	.+2416   	; 0x9b2 <__vector_16>
      42:	00 00       	nop
      44:	c0 c4       	rjmp	.+2432   	; 0x9c6 <__vector_17>
      46:	00 00       	nop
      48:	c8 c4       	rjmp	.+2448   	; 0x9da <__vector_18>
      4a:	00 00       	nop
      4c:	ee c4       	rjmp	.+2524   	; 0xa2a <__vector_19>
      4e:	00 00       	nop
      50:	f6 c4       	rjmp	.+2540   	; 0xa3e <__vector_20>
      52:	00 00       	nop
      54:	fe c4       	rjmp	.+2556   	; 0xa52 <__vector_21>
      56:	00 00       	nop
      58:	06 c5       	rjmp	.+2572   	; 0xa66 <__vector_22>
      5a:	00 00       	nop
      5c:	0e c5       	rjmp	.+2588   	; 0xa7a <__vector_23>
      5e:	00 00       	nop
      60:	16 c5       	rjmp	.+2604   	; 0xa8e <__vector_24>
      62:	00 00       	nop
      64:	1e c5       	rjmp	.+2620   	; 0xaa2 <__vector_25>
      66:	00 00       	nop
      68:	26 c5       	rjmp	.+2636   	; 0xab6 <__vector_26>
      6a:	00 00       	nop
      6c:	2e c5       	rjmp	.+2652   	; 0xaca <__vector_27>
      6e:	00 00       	nop
      70:	36 c5       	rjmp	.+2668   	; 0xade <__vector_28>
      72:	00 00       	nop
      74:	3e c5       	rjmp	.+2684   	; 0xaf2 <__vector_29>
      76:	00 00       	nop
      78:	46 c5       	rjmp	.+2700   	; 0xb06 <__vector_30>
      7a:	00 00       	nop
      7c:	89 c5       	rjmp	.+2834   	; 0xb90 <__vector_31>
      7e:	00 00       	nop
      80:	91 c5       	rjmp	.+2850   	; 0xba4 <__vector_32>
      82:	00 00       	nop
      84:	99 c5       	rjmp	.+2866   	; 0xbb8 <__vector_33>
      86:	00 00       	nop
      88:	a1 c5       	rjmp	.+2882   	; 0xbcc <__vector_34>
	...

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e1       	ldi	r29, 0x10	; 16
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e0 e6       	ldi	r30, 0x60	; 96
      e0:	f5 e1       	ldi	r31, 0x15	; 21
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 39       	cpi	r26, 0x98	; 152
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	21 e0       	ldi	r18, 0x01	; 1
      f4:	a8 e9       	ldi	r26, 0x98	; 152
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ad 3f       	cpi	r26, 0xFD	; 253
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	60 d2       	rcall	.+1216   	; 0x5c4 <main>
     104:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

00000108 <schedulerInit>:
		thHigh = eeParamStruct.thHigh;
		setPoint = eeParamStruct.setPoint;
		sensorInverted = eeParamStruct.sensorInverted;
	}
	
}
     108:	83 b7       	in	r24, 0x33	; 51
     10a:	85 60       	ori	r24, 0x05	; 5
     10c:	83 bf       	out	0x33, r24	; 51
     10e:	83 b7       	in	r24, 0x33	; 51
     110:	88 60       	ori	r24, 0x08	; 8
     112:	83 bf       	out	0x33, r24	; 51
     114:	8d e7       	ldi	r24, 0x7D	; 125
     116:	81 bf       	out	0x31, r24	; 49
     118:	87 b7       	in	r24, 0x37	; 55
     11a:	82 60       	ori	r24, 0x02	; 2
     11c:	87 bf       	out	0x37, r24	; 55
     11e:	08 95       	ret

00000120 <configGPIO>:
     120:	8f e3       	ldi	r24, 0x3F	; 63
     122:	8a bb       	out	0x1a, r24	; 26
     124:	80 ec       	ldi	r24, 0xC0	; 192
     126:	8b bb       	out	0x1b, r24	; 27
     128:	17 ba       	out	0x17, r1	; 23
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	88 bb       	out	0x18, r24	; 24
     12e:	08 95       	ret

00000130 <checkLimits>:
     130:	fc 01       	movw	r30, r24
     132:	80 81       	ld	r24, Z
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	80 95       	com	r24
     138:	90 95       	com	r25
     13a:	9c 01       	movw	r18, r24
     13c:	02 c0       	rjmp	.+4      	; 0x142 <checkLimits+0x12>
     13e:	35 95       	asr	r19
     140:	27 95       	ror	r18
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <checkLimits+0xe>
     146:	b9 01       	movw	r22, r18
     148:	63 70       	andi	r22, 0x03	; 3
     14a:	61 30       	cpi	r22, 0x01	; 1
     14c:	39 f0       	breq	.+14     	; 0x15c <checkLimits+0x2c>
     14e:	62 30       	cpi	r22, 0x02	; 2
     150:	41 f0       	breq	.+16     	; 0x162 <checkLimits+0x32>
     152:	63 30       	cpi	r22, 0x03	; 3
     154:	49 f4       	brne	.+18     	; 0x168 <checkLimits+0x38>
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	08 95       	ret
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	9f ef       	ldi	r25, 0xFF	; 255
     160:	08 95       	ret
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	08 95       	ret

0000016e <checkErrorDir>:
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	86 1b       	sub	r24, r22
     174:	97 0b       	sbc	r25, r23
     176:	80 9f       	mul	r24, r16
     178:	b0 01       	movw	r22, r0
     17a:	81 9f       	mul	r24, r17
     17c:	70 0d       	add	r23, r0
     17e:	90 9f       	mul	r25, r16
     180:	70 0d       	add	r23, r0
     182:	11 24       	eor	r1, r1
     184:	cb 01       	movw	r24, r22
     186:	77 23       	and	r23, r23
     188:	24 f4       	brge	.+8      	; 0x192 <checkErrorDir+0x24>
     18a:	88 27       	eor	r24, r24
     18c:	99 27       	eor	r25, r25
     18e:	86 1b       	sub	r24, r22
     190:	97 0b       	sbc	r25, r23
     192:	84 17       	cp	r24, r20
     194:	95 07       	cpc	r25, r21
     196:	68 f0       	brcs	.+26     	; 0x1b2 <checkErrorDir+0x44>
     198:	82 17       	cp	r24, r18
     19a:	93 07       	cpc	r25, r19
     19c:	28 f0       	brcs	.+10     	; 0x1a8 <checkErrorDir+0x3a>
     19e:	77 23       	and	r23, r23
     1a0:	5c f4       	brge	.+22     	; 0x1b8 <checkErrorDir+0x4a>
     1a2:	8e ef       	ldi	r24, 0xFE	; 254
     1a4:	9f ef       	ldi	r25, 0xFF	; 255
     1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <checkErrorDir+0x54>
     1a8:	77 23       	and	r23, r23
     1aa:	4c f4       	brge	.+18     	; 0x1be <checkErrorDir+0x50>
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	9f ef       	ldi	r25, 0xFF	; 255
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <checkErrorDir+0x54>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <checkErrorDir+0x54>
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <checkErrorDir+0x54>
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <decodeStepMode>:
     1c8:	00 97       	sbiw	r24, 0x00	; 0
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <decodeStepMode+0x20>
     1cc:	9c 01       	movw	r18, r24
     1ce:	99 23       	and	r25, r25
     1d0:	24 f4       	brge	.+8      	; 0x1da <decodeStepMode+0x12>
     1d2:	22 27       	eor	r18, r18
     1d4:	33 27       	eor	r19, r19
     1d6:	28 1b       	sub	r18, r24
     1d8:	39 0b       	sbc	r19, r25
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	22 30       	cpi	r18, 0x02	; 2
     1e0:	31 05       	cpc	r19, r1
     1e2:	24 f0       	brlt	.+8      	; 0x1ec <decodeStepMode+0x24>
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	08 95       	ret

000001ee <loadDefaultCtrlParameters>:
/************************************************************************/
/* @load default parameters to variables                                                                      */
/************************************************************************/
void loadDefaultCtrlParameters(){
		
		thSlow = THRESHOLD_SLOW_DEFAULT;
     1ee:	82 e3       	ldi	r24, 0x32	; 50
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	90 93 a8 01 	sts	0x01A8, r25
     1f6:	80 93 a7 01 	sts	0x01A7, r24
		thHigh = THRESHOLD_HIGH_DEFAULT;
     1fa:	8c e2       	ldi	r24, 0x2C	; 44
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	90 93 a6 01 	sts	0x01A6, r25
     202:	80 93 a5 01 	sts	0x01A5, r24
		setPoint = SETPOINT_DEFAULT;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	92 e0       	ldi	r25, 0x02	; 2
     20a:	90 93 b4 01 	sts	0x01B4, r25
     20e:	80 93 b3 01 	sts	0x01B3, r24
		nSensorFail = N_SENSOR_FAILS;
     212:	8a e0       	ldi	r24, 0x0A	; 10
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 a4 01 	sts	0x01A4, r25
     21a:	80 93 a3 01 	sts	0x01A3, r24
		sensorInverted = SENSOR_INVERTED_DEFAULT;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 a2 01 	sts	0x01A2, r24
     224:	08 95       	ret

00000226 <showLcdSplash>:

*/

void showLcdSplash(void){
	
	LCD_clr();
     226:	2a d5       	rcall	.+2644   	; 0xc7c <LCD_clr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	2f ef       	ldi	r18, 0xFF	; 255
     22a:	83 ec       	ldi	r24, 0xC3	; 195
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	21 50       	subi	r18, 0x01	; 1
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	90 40       	sbci	r25, 0x00	; 0
     234:	e1 f7       	brne	.-8      	; 0x22e <showLcdSplash+0x8>
     236:	00 c0       	rjmp	.+0      	; 0x238 <showLcdSplash+0x12>
     238:	00 00       	nop
	_delay_ms(200);
	LCD_gotoXY(5,0);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	3e d5       	rcall	.+2684   	; 0xcbc <LCD_gotoXY>
	LCD_sendString("WEB GUIDE");
     240:	8a e0       	ldi	r24, 0x0A	; 10
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	1e d5       	rcall	.+2620   	; 0xc82 <LCD_sendString>
	
	LCD_gotoXY(4,1);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	38 d5       	rcall	.+2672   	; 0xcbc <LCD_gotoXY>
	LCD_sendString("HSO & NELSON");
     24c:	84 e1       	ldi	r24, 0x14	; 20
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	18 d5       	rcall	.+2608   	; 0xc82 <LCD_sendString>
	
	
	LCD_gotoXY(4,3);
     252:	63 e0       	ldi	r22, 0x03	; 3
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	32 d5       	rcall	.+2660   	; 0xcbc <LCD_gotoXY>
	LCD_sendString("Version: 1.0");
     258:	81 e2       	ldi	r24, 0x21	; 33
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	12 d5       	rcall	.+2596   	; 0xc82 <LCD_sendString>
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	87 ea       	ldi	r24, 0xA7	; 167
     262:	91 e6       	ldi	r25, 0x61	; 97
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <showLcdSplash+0x3e>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <showLcdSplash+0x48>
     26e:	00 00       	nop
	
	_delay_ms(2000); // to show the message
	
	LCD_clr();
     270:	05 c5       	rjmp	.+2570   	; 0xc7c <LCD_clr>
     272:	08 95       	ret

00000274 <showLcdInitial>:

/************************************************************************/
/* Initial LCD form                                                                     */
/************************************************************************/
void showLcdInitial(void){
	LCD_gotoXY(0,0); // 20 
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	21 d5       	rcall	.+2626   	; 0xcbc <LCD_gotoXY>
	LCD_sendString("  TH      TL      I " );
     27a:	8e e2       	ldi	r24, 0x2E	; 46
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	01 d5       	rcall	.+2562   	; 0xc82 <LCD_sendString>
	
	LCD_gotoXY(0,2); // 20
     280:	62 e0       	ldi	r22, 0x02	; 2
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	1b d5       	rcall	.+2614   	; 0xcbc <LCD_gotoXY>
	LCD_sendString(" REF    FEED     X  " );
     286:	83 e4       	ldi	r24, 0x43	; 67
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	fb c4       	rjmp	.+2550   	; 0xc82 <LCD_sendString>
     28c:	08 95       	ret

0000028e <updateLcdValues>:
	
}

void updateLcdValues(uint16_t setPoint, uint16_t feedBack, uint16_t histLow, uint16_t histHigh, int rev){
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <updateLcdValues+0x1a>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <updateLcdValues+0x1c>
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	98 2e       	mov	r9, r24
     2b2:	89 2e       	mov	r8, r25
     2b4:	b6 2e       	mov	r11, r22
     2b6:	a7 2e       	mov	r10, r23
     2b8:	d4 2e       	mov	r13, r20
     2ba:	c5 2e       	mov	r12, r21
     2bc:	f2 2e       	mov	r15, r18
     2be:	e3 2e       	mov	r14, r19
char buff[5];

	//1	
	LCD_gotoXY(0,1);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	fb d4       	rcall	.+2550   	; 0xcbc <LCD_gotoXY>
	sprintf(buff,"%3d",histHigh);
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	28 e5       	ldi	r18, 0x58	; 88
     2cc:	31 e0       	ldi	r19, 0x01	; 1
     2ce:	3f 93       	push	r19
     2d0:	2f 93       	push	r18
     2d2:	ce 01       	movw	r24, r28
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	7c 01       	movw	r14, r24
     2d8:	ff 92       	push	r15
     2da:	8f 93       	push	r24
     2dc:	7d d6       	rcall	.+3322   	; 0xfd8 <sprintf>
	LCD_sendString(buff);
     2de:	c7 01       	movw	r24, r14
     2e0:	d0 d4       	rcall	.+2464   	; 0xc82 <LCD_sendString>
	
	LCD_gotoXY(7,1);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	87 e0       	ldi	r24, 0x07	; 7
     2e6:	ea d4       	rcall	.+2516   	; 0xcbc <LCD_gotoXY>
	sprintf(buff,"%4d",histLow);
     2e8:	cf 92       	push	r12
     2ea:	df 92       	push	r13
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fc e5       	ldi	r31, 0x5C	; 92
     2f0:	cf 2e       	mov	r12, r31
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	df 2e       	mov	r13, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	df 92       	push	r13
     2fa:	cf 92       	push	r12
     2fc:	ff 92       	push	r15
     2fe:	ef 92       	push	r14
     300:	6b d6       	rcall	.+3286   	; 0xfd8 <sprintf>
	LCD_sendString(buff);
     302:	c7 01       	movw	r24, r14
     304:	be d4       	rcall	.+2428   	; 0xc82 <LCD_sendString>
	
	LCD_gotoXY(17,1);
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	81 e1       	ldi	r24, 0x11	; 17
     30a:	d8 d4       	rcall	.+2480   	; 0xcbc <LCD_gotoXY>
	sprintf(buff,"%d",rev);
     30c:	1f 93       	push	r17
     30e:	0f 93       	push	r16
     310:	00 e6       	ldi	r16, 0x60	; 96
     312:	11 e0       	ldi	r17, 0x01	; 1
     314:	1f 93       	push	r17
     316:	0f 93       	push	r16
     318:	ff 92       	push	r15
     31a:	ef 92       	push	r14
     31c:	5d d6       	rcall	.+3258   	; 0xfd8 <sprintf>
	LCD_sendString(buff);
     31e:	c7 01       	movw	r24, r14
     320:	b0 d4       	rcall	.+2400   	; 0xc82 <LCD_sendString>
	
	// 3
	LCD_gotoXY(1,3);
     322:	63 e0       	ldi	r22, 0x03	; 3
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	ca d4       	rcall	.+2452   	; 0xcbc <LCD_gotoXY>
	sprintf(buff,"%d",setPoint);
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	1f 93       	push	r17
     32e:	0f 93       	push	r16
     330:	ff 92       	push	r15
     332:	ef 92       	push	r14
     334:	51 d6       	rcall	.+3234   	; 0xfd8 <sprintf>
	LCD_sendString(buff);
     336:	c7 01       	movw	r24, r14
     338:	a4 d4       	rcall	.+2376   	; 0xc82 <LCD_sendString>
	
	LCD_gotoXY(8,3);
     33a:	63 e0       	ldi	r22, 0x03	; 3
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	be d4       	rcall	.+2428   	; 0xcbc <LCD_gotoXY>
	sprintf(buff,"%4d",feedBack);
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	df 92       	push	r13
     346:	cf 92       	push	r12
     348:	ff 92       	push	r15
     34a:	ef 92       	push	r14
     34c:	45 d6       	rcall	.+3210   	; 0xfd8 <sprintf>
	LCD_sendString(buff);
     34e:	c7 01       	movw	r24, r14
     350:	98 d4       	rcall	.+2352   	; 0xc82 <LCD_sendString>
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	
	
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	af 90       	pop	r10
     37a:	9f 90       	pop	r9
     37c:	8f 90       	pop	r8
     37e:	08 95       	ret

00000380 <calibrateMotorPos>:
/************************************************************************/
/* @Calibrate Center position                                                 */
/************************************************************************/
void calibrateMotorPos(motor_t *m){
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
	uint32_t currentCnt=0;
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//direcao directa procura sensor
     392:	01 e0       	ldi	r16, 0x01	; 1
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	6d d5       	rcall	.+2778   	; 0xe7c <A498x_setNewMotorMode>
	
	while (!((checkLimits(&PINA,6))==SENSOR_RIGHT_LIMIT)){
     3a2:	0b c0       	rjmp	.+22     	; 0x3ba <calibrateMotorPos+0x3a>
			
		if (flagTaskMotor){
     3a4:	80 91 9d 01 	lds	r24, 0x019D
     3a8:	88 23       	and	r24, r24
     3aa:	39 f0       	breq	.+14     	; 0x3ba <calibrateMotorPos+0x3a>
			USART1_sendStr("DIREITA\r\n");
     3ac:	83 e6       	ldi	r24, 0x63	; 99
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	92 d5       	rcall	.+2852   	; 0xed6 <USART1_sendStr>
			
			A498x_moveMotor(m);
     3b2:	ce 01       	movw	r24, r28
     3b4:	55 d5       	rcall	.+2730   	; 0xe60 <A498x_moveMotor>
			flagTaskMotor=0; 
     3b6:	10 92 9d 01 	sts	0x019D, r1
void calibrateMotorPos(motor_t *m){
	uint32_t currentCnt=0;
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//direcao directa procura sensor
	
	while (!((checkLimits(&PINA,6))==SENSOR_RIGHT_LIMIT)){
     3ba:	66 e0       	ldi	r22, 0x06	; 6
     3bc:	89 e3       	ldi	r24, 0x39	; 57
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	b7 de       	rcall	.-658    	; 0x130 <checkLimits>
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	79 f7       	brne	.-34     	; 0x3a4 <calibrateMotorPos+0x24>
			A498x_moveMotor(m);
			flagTaskMotor=0; 
		}
	}
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECCW,FULL_STEP,1);// direcao oposta procura outro sensor
     3c6:	01 e0       	ldi	r16, 0x01	; 1
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	4f ef       	ldi	r20, 0xFF	; 255
     3ce:	5f ef       	ldi	r21, 0xFF	; 255
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	ce 01       	movw	r24, r28
     3d6:	52 d5       	rcall	.+2724   	; 0xe7c <A498x_setNewMotorMode>
	USART1_sendStr("ESQUERDA\r\n");
     3d8:	8d e6       	ldi	r24, 0x6D	; 109
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	7c d5       	rcall	.+2808   	; 0xed6 <USART1_sendStr>
	while (!((checkLimits(&PINA,6))==SENSOR_LEFT_LIMIT)){
     3de:	1b c0       	rjmp	.+54     	; 0x416 <calibrateMotorPos+0x96>
		
		if(flagTaskMotor){
     3e0:	80 91 9d 01 	lds	r24, 0x019D
     3e4:	88 23       	and	r24, r24
     3e6:	b9 f0       	breq	.+46     	; 0x416 <calibrateMotorPos+0x96>
			//A498x_setOutputPins(m);//load value on PORT
			A498x_moveMotor(m);//shift value to internal DAC
     3e8:	ce 01       	movw	r24, r28
     3ea:	3a d5       	rcall	.+2676   	; 0xe60 <A498x_moveMotor>
			flagTaskMotor=0;
     3ec:	10 92 9d 01 	sts	0x019D, r1
			stepCnt++;
     3f0:	80 91 98 01 	lds	r24, 0x0198
     3f4:	90 91 99 01 	lds	r25, 0x0199
     3f8:	a0 91 9a 01 	lds	r26, 0x019A
     3fc:	b0 91 9b 01 	lds	r27, 0x019B
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	a1 1d       	adc	r26, r1
     404:	b1 1d       	adc	r27, r1
     406:	80 93 98 01 	sts	0x0198, r24
     40a:	90 93 99 01 	sts	0x0199, r25
     40e:	a0 93 9a 01 	sts	0x019A, r26
     412:	b0 93 9b 01 	sts	0x019B, r27
		}
	}
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECCW,FULL_STEP,1);// direcao oposta procura outro sensor
	USART1_sendStr("ESQUERDA\r\n");
	while (!((checkLimits(&PINA,6))==SENSOR_LEFT_LIMIT)){
     416:	66 e0       	ldi	r22, 0x06	; 6
     418:	89 e3       	ldi	r24, 0x39	; 57
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	89 de       	rcall	.-750    	; 0x130 <checkLimits>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	f9 f6       	brne	.-66     	; 0x3e0 <calibrateMotorPos+0x60>
			A498x_moveMotor(m);//shift value to internal DAC
			flagTaskMotor=0;
			stepCnt++;
		}
	}
	sprintf(bufferDummy,"%u\r\n",stepCnt);
     422:	80 91 9b 01 	lds	r24, 0x019B
     426:	8f 93       	push	r24
     428:	80 91 9a 01 	lds	r24, 0x019A
     42c:	8f 93       	push	r24
     42e:	80 91 99 01 	lds	r24, 0x0199
     432:	8f 93       	push	r24
     434:	80 91 98 01 	lds	r24, 0x0198
     438:	8f 93       	push	r24
     43a:	88 e7       	ldi	r24, 0x78	; 120
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	85 eb       	ldi	r24, 0xB5	; 181
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	c6 d5       	rcall	.+2956   	; 0xfd8 <sprintf>
	USART1_sendStr(bufferDummy);
     44c:	85 eb       	ldi	r24, 0xB5	; 181
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	42 d5       	rcall	.+2692   	; 0xed6 <USART1_sendStr>
	stepCnt/=2;
     452:	80 91 98 01 	lds	r24, 0x0198
     456:	90 91 99 01 	lds	r25, 0x0199
     45a:	a0 91 9a 01 	lds	r26, 0x019A
     45e:	b0 91 9b 01 	lds	r27, 0x019B
     462:	b6 95       	lsr	r27
     464:	a7 95       	ror	r26
     466:	97 95       	ror	r25
     468:	87 95       	ror	r24
     46a:	80 93 98 01 	sts	0x0198, r24
     46e:	90 93 99 01 	sts	0x0199, r25
     472:	a0 93 9a 01 	sts	0x019A, r26
     476:	b0 93 9b 01 	sts	0x019B, r27
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//direcao directa procura sensor
     47a:	01 e0       	ldi	r16, 0x01	; 1
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	f8 d4       	rcall	.+2544   	; 0xe7c <A498x_setNewMotorMode>
	USART1_sendStr("CENTRANDO\r\n");
     48c:	8d e7       	ldi	r24, 0x7D	; 125
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	22 d5       	rcall	.+2628   	; 0xed6 <USART1_sendStr>
	while (currentCnt <= stepCnt){
     492:	8d b7       	in	r24, 0x3d	; 61
     494:	9e b7       	in	r25, 0x3e	; 62
     496:	08 96       	adiw	r24, 0x08	; 8
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	9e bf       	out	0x3e, r25	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	8d bf       	out	0x3d, r24	; 61
}
/************************************************************************/
/* @Calibrate Center position                                                 */
/************************************************************************/
void calibrateMotorPos(motor_t *m){
	uint32_t currentCnt=0;
     4a2:	c1 2c       	mov	r12, r1
     4a4:	d1 2c       	mov	r13, r1
     4a6:	76 01       	movw	r14, r12
	USART1_sendStr(bufferDummy);
	stepCnt/=2;
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//direcao directa procura sensor
	USART1_sendStr("CENTRANDO\r\n");
	while (currentCnt <= stepCnt){
     4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <calibrateMotorPos+0x144>
		if(flagTaskMotor){
     4aa:	80 91 9d 01 	lds	r24, 0x019D
     4ae:	88 23       	and	r24, r24
     4b0:	e1 f3       	breq	.-8      	; 0x4aa <calibrateMotorPos+0x12a>
			//A498x_setOutputPins(m);//load value on PORT
			A498x_moveMotor(m);//shift value to internal DAC
     4b2:	ce 01       	movw	r24, r28
     4b4:	d5 d4       	rcall	.+2474   	; 0xe60 <A498x_moveMotor>
			flagTaskMotor=0;
     4b6:	10 92 9d 01 	sts	0x019D, r1
			currentCnt++;
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	c9 1a       	sub	r12, r25
     4be:	d9 0a       	sbc	r13, r25
     4c0:	e9 0a       	sbc	r14, r25
     4c2:	f9 0a       	sbc	r15, r25
	USART1_sendStr(bufferDummy);
	stepCnt/=2;
	//set values to load on PORT
	A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//direcao directa procura sensor
	USART1_sendStr("CENTRANDO\r\n");
	while (currentCnt <= stepCnt){
     4c4:	80 91 98 01 	lds	r24, 0x0198
     4c8:	90 91 99 01 	lds	r25, 0x0199
     4cc:	a0 91 9a 01 	lds	r26, 0x019A
     4d0:	b0 91 9b 01 	lds	r27, 0x019B
     4d4:	8c 15       	cp	r24, r12
     4d6:	9d 05       	cpc	r25, r13
     4d8:	ae 05       	cpc	r26, r14
     4da:	bf 05       	cpc	r27, r15
     4dc:	30 f7       	brcc	.-52     	; 0x4aa <calibrateMotorPos+0x12a>
			A498x_moveMotor(m);//shift value to internal DAC
			flagTaskMotor=0;
			currentCnt++;
		}
	}
	sprintf(bufferDummy,"%u\r\n",currentCnt);
     4de:	ff 92       	push	r15
     4e0:	ef 92       	push	r14
     4e2:	df 92       	push	r13
     4e4:	cf 92       	push	r12
     4e6:	88 e7       	ldi	r24, 0x78	; 120
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	85 eb       	ldi	r24, 0xB5	; 181
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	70 d5       	rcall	.+2784   	; 0xfd8 <sprintf>
	USART1_sendStr(bufferDummy);
     4f8:	85 eb       	ldi	r24, 0xB5	; 181
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	ec d4       	rcall	.+2520   	; 0xed6 <USART1_sendStr>
	USART1_sendStr("END\r\n");
     4fe:	89 e8       	ldi	r24, 0x89	; 137
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	e9 d4       	rcall	.+2514   	; 0xed6 <USART1_sendStr>
	
}
     504:	8d b7       	in	r24, 0x3d	; 61
     506:	9e b7       	in	r25, 0x3e	; 62
     508:	08 96       	adiw	r24, 0x08	; 8
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	9e bf       	out	0x3e, r25	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	8d bf       	out	0x3d, r24	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	08 95       	ret

00000526 <setCenter>:
/************************************************************************/
/* @ Set motor on center displacement                                   */
/************************************************************************/
void setCenter(motor_t *m){
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
uint32_t i=0;
		A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//set values to load on PORT
     538:	01 e0       	ldi	r16, 0x01	; 1
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	9a d4       	rcall	.+2356   	; 0xe7c <A498x_setNewMotorMode>
		while (!((checkLimits(&PINA,6))==SENSOR_RIGHT_LIMIT)){
     548:	08 c0       	rjmp	.+16     	; 0x55a <setCenter+0x34>
			if (flagTaskMotor){
     54a:	80 91 9d 01 	lds	r24, 0x019D
     54e:	88 23       	and	r24, r24
     550:	21 f0       	breq	.+8      	; 0x55a <setCenter+0x34>
				A498x_moveMotor(m);//load values on port & move motor
     552:	ce 01       	movw	r24, r28
     554:	85 d4       	rcall	.+2314   	; 0xe60 <A498x_moveMotor>
				flagTaskMotor=0;
     556:	10 92 9d 01 	sts	0x019D, r1
/* @ Set motor on center displacement                                   */
/************************************************************************/
void setCenter(motor_t *m){
uint32_t i=0;
		A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECW,FULL_STEP,1);//set values to load on PORT
		while (!((checkLimits(&PINA,6))==SENSOR_RIGHT_LIMIT)){
     55a:	66 e0       	ldi	r22, 0x06	; 6
     55c:	89 e3       	ldi	r24, 0x39	; 57
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	e7 dd       	rcall	.-1074   	; 0x130 <checkLimits>
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	91 f7       	brne	.-28     	; 0x54a <setCenter+0x24>
			if (flagTaskMotor){
				A498x_moveMotor(m);//load values on port & move motor
				flagTaskMotor=0;
			}
 		}
		A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECCW,FULL_STEP,1);//set values to load on PORT
     566:	01 e0       	ldi	r16, 0x01	; 1
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	5f ef       	ldi	r21, 0xFF	; 255
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	82 d4       	rcall	.+2308   	; 0xe7c <A498x_setNewMotorMode>
		for(i=0;i<=stepCnt;i++){
     578:	c1 2c       	mov	r12, r1
     57a:	d1 2c       	mov	r13, r1
     57c:	76 01       	movw	r14, r12
			while(!flagTaskMotor);
     57e:	80 91 9d 01 	lds	r24, 0x019D
     582:	88 23       	and	r24, r24
     584:	e1 f3       	breq	.-8      	; 0x57e <setCenter+0x58>
				A498x_moveMotor(m);//load values on port & move motor
     586:	ce 01       	movw	r24, r28
     588:	6b d4       	rcall	.+2262   	; 0xe60 <A498x_moveMotor>
				flagTaskMotor=0;
     58a:	10 92 9d 01 	sts	0x019D, r1
				A498x_moveMotor(m);//load values on port & move motor
				flagTaskMotor=0;
			}
 		}
		A498x_setNewMotorMode(m,MOTOR_ENABLE,MOVECCW,FULL_STEP,1);//set values to load on PORT
		for(i=0;i<=stepCnt;i++){
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	c8 1a       	sub	r12, r24
     592:	d8 0a       	sbc	r13, r24
     594:	e8 0a       	sbc	r14, r24
     596:	f8 0a       	sbc	r15, r24
     598:	80 91 98 01 	lds	r24, 0x0198
     59c:	90 91 99 01 	lds	r25, 0x0199
     5a0:	a0 91 9a 01 	lds	r26, 0x019A
     5a4:	b0 91 9b 01 	lds	r27, 0x019B
     5a8:	8c 15       	cp	r24, r12
     5aa:	9d 05       	cpc	r25, r13
     5ac:	ae 05       	cpc	r26, r14
     5ae:	bf 05       	cpc	r27, r15
     5b0:	30 f7       	brcc	.-52     	; 0x57e <setCenter+0x58>
			while(!flagTaskMotor);
				A498x_moveMotor(m);//load values on port & move motor
				flagTaskMotor=0;
		}
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	08 95       	ret

000005c4 <main>:
int main(void)
{	
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	65 97       	sbiw	r28, 0x15	; 21
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61

	#define N_MOTORS 1
	motor_t motorStep[N_MOTORS];
	A498x_initMotorStruct(&motorStep[0], &PORTA);	
     5d8:	6b e3       	ldi	r22, 0x3B	; 59
     5da:	ce 01       	movw	r24, r28
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	f3 d3       	rcall	.+2022   	; 0xdc6 <A498x_initMotorStruct>
	
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
     5e0:	48 e9       	ldi	r20, 0x98	; 152
     5e2:	66 e0       	ldi	r22, 0x06	; 6
     5e4:	80 e1       	ldi	r24, 0x10	; 16
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	65 d4       	rcall	.+2250   	; 0xeb4 <USART1_config>
	//Config IO Ports
	configGPIO();
     5ea:	9a dd       	rcall	.-1228   	; 0x120 <configGPIO>
	//Init Scheduler
	schedulerInit();
     5ec:	8d dd       	rcall	.-1254   	; 0x108 <schedulerInit>
	//Init ADC
	ADC_init(ADC_ENABLE,ADC_REF_VCC,ADC_MAX_FREQ); //CHECK PARAMS TO FILL IN
     5ee:	48 ec       	ldi	r20, 0xC8	; 200
     5f0:	60 e4       	ldi	r22, 0x40	; 64
     5f2:	80 e8       	ldi	r24, 0x80	; 128
     5f4:	c6 d0       	rcall	.+396    	; 0x782 <ADC_init>
	//Init LCD
	LCD_init();
     5f6:	92 d3       	rcall	.+1828   	; 0xd1c <LCD_init>
	LCD_clr();
     5f8:	41 d3       	rcall	.+1666   	; 0xc7c <LCD_clr>
	//LCD_sendString(&temp);
	
	showLcdSplash(); // show splash
     5fa:	15 de       	rcall	.-982    	; 0x226 <showLcdSplash>
	showLcdInitial(); // show initial lcd Form
     5fc:	3b de       	rcall	.-906    	; 0x274 <showLcdInitial>
	
	//A498x_setNewMotorMode(&motorStep[0],MOTOR_ENABLE,MOVECW,HALF_STEP,1); // comeca parado
	
	loadDefaultCtrlParameters();
     5fe:	f7 dd       	rcall	.-1042   	; 0x1ee <loadDefaultCtrlParameters>

	//if nothing on eeprom load default Parameters
	//if (!loadParamFromEeprom()) loadDefaultCtrlParameters();
	
	//enable interrupts
	sei();
     600:	78 94       	sei
	
	USART1_sendStr("HELLO\n\r");
     602:	8f e8       	ldi	r24, 0x8F	; 143
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	67 d4       	rcall	.+2254   	; 0xed6 <USART1_sendStr>
// 	while(1){
// 		_delay_ms(10);
// 		A498x_moveMotor(&motorStep[0]);
// 	}
//	uint8_t autocontrol=1;
	calibrateMotorPos(&motorStep[0]); // ele vai ao centro 
     608:	ce 01       	movw	r24, r28
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	b9 de       	rcall	.-654    	; 0x380 <calibrateMotorPos>
     60e:	2f ef       	ldi	r18, 0xFF	; 255
     610:	8b e7       	ldi	r24, 0x7B	; 123
     612:	92 e9       	ldi	r25, 0x92	; 146
     614:	21 50       	subi	r18, 0x01	; 1
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <main+0x50>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0x5a>
     61e:	00 00       	nop
	_delay_ms(3000);
	setCenter(&motorStep[0]); //TESTED
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	80 df       	rcall	.-256    	; 0x526 <setCenter>
 			int dirJam=checkLimits(&PINA,6);//will receive -1 as left,1 as right,0 as sensor free,2 as sensor error
 			
 			if(dirJam!=0 ){
				 A498x_setMotorDir(&motorStep[0],STOP_MOTOR);
 				if(dirJam == SENSOR_ERROR);//send error msg to lcd- FILL IN THE MESSAGE
 					 if ( SIGN(dirJam)!=SIGN(dir) ){
     626:	aa 24       	eor	r10, r10
     628:	a3 94       	inc	r10
     62a:	b1 2c       	mov	r11, r1
// 		if(flagTaskButtons&0x00){	//remove mask
// 		
// 			flagTaskButtons=0;
// 		}
// 			
 		if(flagTaskControl){
     62c:	80 91 9f 01 	lds	r24, 0x019F
     630:	88 23       	and	r24, r24
     632:	09 f4       	brne	.+2      	; 0x636 <main+0x72>
     634:	54 c0       	rjmp	.+168    	; 0x6de <main+0x11a>
 			
 			int dir = checkErrorDir(setPoint,readSensors(CHCELL),thSlow,thHigh,sensorInverted);
     636:	00 91 a2 01 	lds	r16, 0x01A2
     63a:	11 27       	eor	r17, r17
     63c:	07 fd       	sbrc	r16, 7
     63e:	10 95       	com	r17
     640:	c0 90 a5 01 	lds	r12, 0x01A5
     644:	d0 90 a6 01 	lds	r13, 0x01A6
     648:	e0 90 a7 01 	lds	r14, 0x01A7
     64c:	f0 90 a8 01 	lds	r15, 0x01A8
/************************************************************************/
/* read sensors                                                                     */
/************************************************************************/
uint16_t readSensors(uint8_t  ch){
uint16_t val=0;	
	val=ADC_readAndWAIT(ch);	
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	a6 d0       	rcall	.+332    	; 0x7a0 <ADC_readAndWAIT>
// 			flagTaskButtons=0;
// 		}
// 			
 		if(flagTaskControl){
 			
 			int dir = checkErrorDir(setPoint,readSensors(CHCELL),thSlow,thHigh,sensorInverted);
     654:	96 01       	movw	r18, r12
     656:	a7 01       	movw	r20, r14
     658:	bc 01       	movw	r22, r24
     65a:	80 91 b3 01 	lds	r24, 0x01B3
     65e:	90 91 b4 01 	lds	r25, 0x01B4
     662:	85 dd       	rcall	.-1270   	; 0x16e <checkErrorDir>
     664:	8c 01       	movw	r16, r24
 			int mode = decodeStepMode(dir);
     666:	b0 dd       	rcall	.-1184   	; 0x1c8 <decodeStepMode>
     668:	d8 2e       	mov	r13, r24
// 			#ifdef DEBUG_MAIN
// 			sprintf(bufferDummy,"%d\n\r",dir);
// 			USART1_sendStr(bufferDummy);
// 			#endif
// 			
 			int dirJam=checkLimits(&PINA,6);//will receive -1 as left,1 as right,0 as sensor free,2 as sensor error
     66a:	66 e0       	ldi	r22, 0x06	; 6
     66c:	89 e3       	ldi	r24, 0x39	; 57
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	5f dd       	rcall	.-1346   	; 0x130 <checkLimits>
     672:	7c 01       	movw	r14, r24
 			
 			if(dirJam!=0 ){
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	49 f1       	breq	.+82     	; 0x6ca <main+0x106>
				 A498x_setMotorDir(&motorStep[0],STOP_MOTOR);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	12 d4       	rcall	.+2084   	; 0xea6 <A498x_setMotorDir>
 				if(dirJam == SENSOR_ERROR);//send error msg to lcd- FILL IN THE MESSAGE
 					 if ( SIGN(dirJam)!=SIGN(dir) ){
     682:	1e 14       	cp	r1, r14
     684:	1f 04       	cpc	r1, r15
     686:	3c f0       	brlt	.+14     	; 0x696 <main+0xd2>
     688:	4f 2d       	mov	r20, r15
     68a:	44 0f       	add	r20, r20
     68c:	44 0b       	sbc	r20, r20
     68e:	55 27       	eor	r21, r21
     690:	47 fd       	sbrc	r20, 7
     692:	50 95       	com	r21
     694:	02 c0       	rjmp	.+4      	; 0x69a <main+0xd6>
     696:	4a 2d       	mov	r20, r10
     698:	5b 2d       	mov	r21, r11
     69a:	10 16       	cp	r1, r16
     69c:	11 06       	cpc	r1, r17
     69e:	3c f0       	brlt	.+14     	; 0x6ae <main+0xea>
     6a0:	21 2f       	mov	r18, r17
     6a2:	22 0f       	add	r18, r18
     6a4:	22 0b       	sbc	r18, r18
     6a6:	33 27       	eor	r19, r19
     6a8:	27 fd       	sbrc	r18, 7
     6aa:	30 95       	com	r19
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <main+0xee>
     6ae:	2a 2d       	mov	r18, r10
     6b0:	3b 2d       	mov	r19, r11
     6b2:	42 17       	cp	r20, r18
     6b4:	53 07       	cpc	r21, r19
     6b6:	89 f0       	breq	.+34     	; 0x6da <main+0x116>
							A498x_setMotorDir(&motorStep[0],dir);
     6b8:	b8 01       	movw	r22, r16
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	f3 d3       	rcall	.+2022   	; 0xea6 <A498x_setMotorDir>
 							A498x_setMotorStepMode(&motorStep[0],mode);
     6c0:	6d 2d       	mov	r22, r13
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	e9 d3       	rcall	.+2002   	; 0xe9a <A498x_setMotorStepMode>
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <main+0x116>
 					 }						
 			}
			 else{
 				A498x_setMotorDir(&motorStep[0],dir);
     6ca:	b8 01       	movw	r22, r16
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	ea d3       	rcall	.+2004   	; 0xea6 <A498x_setMotorDir>
 				A498x_setMotorStepMode(&motorStep[0],mode);
     6d2:	6d 2d       	mov	r22, r13
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	e0 d3       	rcall	.+1984   	; 0xe9a <A498x_setMotorStepMode>
			 }					
			
			flagTaskControl=0;
     6da:	10 92 9f 01 	sts	0x019F, r1
		}
// 		
// 		
// 		// update motor
		if(flagTaskMotor){	
     6de:	80 91 9d 01 	lds	r24, 0x019D
     6e2:	88 23       	and	r24, r24
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <main+0x12c>
			// update motor
			A498x_moveMotor(&motorStep[0]);
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	ba d3       	rcall	.+1908   	; 0xe60 <A498x_moveMotor>
			flagTaskMotor=0;
     6ec:	10 92 9d 01 	sts	0x019D, r1
		}
// 		
// 		
		if(flagTaskLcd){
     6f0:	80 91 9c 01 	lds	r24, 0x019C
     6f4:	88 23       	and	r24, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <main+0x136>
     6f8:	99 cf       	rjmp	.-206    	; 0x62c <main+0x68>
			// update lcd here
		
			updateLcdValues(setPoint,readSensors(CHCELL),thSlow,thHigh,sensorInverted);
     6fa:	00 91 a2 01 	lds	r16, 0x01A2
     6fe:	11 27       	eor	r17, r17
     700:	07 fd       	sbrc	r16, 7
     702:	10 95       	com	r17
     704:	c0 90 a5 01 	lds	r12, 0x01A5
     708:	d0 90 a6 01 	lds	r13, 0x01A6
     70c:	e0 90 a7 01 	lds	r14, 0x01A7
     710:	f0 90 a8 01 	lds	r15, 0x01A8
/************************************************************************/
/* read sensors                                                                     */
/************************************************************************/
uint16_t readSensors(uint8_t  ch){
uint16_t val=0;	
	val=ADC_readAndWAIT(ch);	
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	44 d0       	rcall	.+136    	; 0x7a0 <ADC_readAndWAIT>
// 		
// 		
		if(flagTaskLcd){
			// update lcd here
		
			updateLcdValues(setPoint,readSensors(CHCELL),thSlow,thHigh,sensorInverted);
     718:	96 01       	movw	r18, r12
     71a:	a7 01       	movw	r20, r14
     71c:	bc 01       	movw	r22, r24
     71e:	80 91 b3 01 	lds	r24, 0x01B3
     722:	90 91 b4 01 	lds	r25, 0x01B4
     726:	b3 dd       	rcall	.-1178   	; 0x28e <updateLcdValues>
			
			// reset flag for next run
			flagTaskLcd=0;
     728:	10 92 9c 01 	sts	0x019C, r1
     72c:	7f cf       	rjmp	.-258    	; 0x62c <main+0x68>

0000072e <ADC_calcPreScaler>:
	// grab values é ler pra uma var adcl e adch
	*val = ADCL;
	*val |= (ADCH <<8);
	return 1;
	
}
     72e:	28 2f       	mov	r18, r24
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a8 ee       	ldi	r26, 0xE8	; 232
     734:	b3 e0       	ldi	r27, 0x03	; 3
     736:	41 d4       	rcall	.+2178   	; 0xfba <__umulhisi3>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	74 e2       	ldi	r23, 0x24	; 36
     740:	84 ef       	ldi	r24, 0xF4	; 244
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	18 d4       	rcall	.+2096   	; 0xf76 <__udivmodsi4>
     746:	22 23       	and	r18, r18
     748:	74 f0       	brlt	.+28     	; 0x766 <ADC_calcPreScaler+0x38>
     74a:	22 30       	cpi	r18, 0x02	; 2
     74c:	70 f0       	brcs	.+28     	; 0x76a <ADC_calcPreScaler+0x3c>
     74e:	24 30       	cpi	r18, 0x04	; 4
     750:	70 f0       	brcs	.+28     	; 0x76e <ADC_calcPreScaler+0x40>
     752:	28 30       	cpi	r18, 0x08	; 8
     754:	70 f0       	brcs	.+28     	; 0x772 <ADC_calcPreScaler+0x44>
     756:	20 31       	cpi	r18, 0x10	; 16
     758:	70 f0       	brcs	.+28     	; 0x776 <ADC_calcPreScaler+0x48>
     75a:	20 32       	cpi	r18, 0x20	; 32
     75c:	70 f0       	brcs	.+28     	; 0x77a <ADC_calcPreScaler+0x4c>
     75e:	20 34       	cpi	r18, 0x40	; 64
     760:	70 f4       	brcc	.+28     	; 0x77e <ADC_calcPreScaler+0x50>
     762:	86 e0       	ldi	r24, 0x06	; 6
     764:	08 95       	ret
     766:	87 e0       	ldi	r24, 0x07	; 7
     768:	08 95       	ret
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	08 95       	ret
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	08 95       	ret
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	08 95       	ret
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	08 95       	ret
     77a:	85 e0       	ldi	r24, 0x05	; 5
     77c:	08 95       	ret
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	08 95       	ret

00000782 <ADC_init>:
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	c6 2f       	mov	r28, r22
     788:	96 b1       	in	r25, 0x06	; 6
     78a:	89 2b       	or	r24, r25
     78c:	86 b9       	out	0x06, r24	; 6
     78e:	d6 b1       	in	r29, 0x06	; 6
     790:	84 2f       	mov	r24, r20
     792:	cd df       	rcall	.-102    	; 0x72e <ADC_calcPreScaler>
     794:	8d 2b       	or	r24, r29
     796:	86 b9       	out	0x06, r24	; 6
     798:	c7 b9       	out	0x07, r28	; 7
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <ADC_readAndWAIT>:
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7 (7 channels can be used in single ended input) more on differential input
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits and select the channel(ch)
     7a0:	97 b1       	in	r25, 0x07	; 7
/************************************************************************/
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7 (7 channels can be used in single ended input) more on differential input
     7a2:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits and select the channel(ch)
     7a4:	98 7f       	andi	r25, 0xF8	; 248
     7a6:	98 2b       	or	r25, r24
     7a8:	97 b9       	out	0x07, r25	; 7
	
	
	//-- Start conv
	ADCSRA |= ADC_START_CONV;
     7aa:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until complete
	while(ADCSRA & ADC_START_CONV);
     7ac:	36 99       	sbic	0x06, 6	; 6
     7ae:	fe cf       	rjmp	.-4      	; 0x7ac <ADC_readAndWAIT+0xc>
	
	// grab values é ler pra uma var adcl e adch
	//ADCL Must be read always first
	val = ADCL;
     7b0:	84 b1       	in	r24, 0x04	; 4
	val |= (ADCH <<8);
     7b2:	25 b1       	in	r18, 0x05	; 5
     7b4:	90 e0       	ldi	r25, 0x00	; 0
	return val;
	 
     7b6:	92 2b       	or	r25, r18
     7b8:	08 95       	ret

000007ba <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
     7be:	fc 01       	movw	r30, r24
     7c0:	e6 53       	subi	r30, 0x36	; 54
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	10 82       	st	Z, r1
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	82 33       	cpi	r24, 0x32	; 50
     7ca:	91 05       	cpc	r25, r1
     7cc:	c1 f7       	brne	.-16     	; 0x7be <clearBuffer+0x4>

}
     7ce:	08 95       	ret

000007d0 <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
	
}
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
	
}
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
	
}
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
	
}
     816:	0f 90       	pop	r0
     818:	0f be       	out	0x3f, r0	; 63
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
	
}
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
	
}
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
	
}
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
	
}
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
	
}
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti

00000884 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
	
	
	
}
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
	
}
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
	
}
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	0f 90       	pop	r0
     8bc:	1f 90       	pop	r1
     8be:	18 95       	reti

000008c0 <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
	
}
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
	
}
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <__vector_15>:
extern uint8_t flagTaskUsartMessage;

/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
     902:	bf 93       	push	r27
	
		static uint16_t tickCounter;
		// scheduling period
		// control enabled
		tickCounter++;
     904:	20 91 a0 01 	lds	r18, 0x01A0
     908:	30 91 a1 01 	lds	r19, 0x01A1
     90c:	2f 5f       	subi	r18, 0xFF	; 255
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
     910:	30 93 a1 01 	sts	0x01A1, r19
     914:	20 93 a0 01 	sts	0x01A0, r18
		
		if(tickCounter % taskControlPeriod == 0) flagTaskControl++;
     918:	60 91 04 01 	lds	r22, 0x0104
     91c:	70 91 05 01 	lds	r23, 0x0105
     920:	c9 01       	movw	r24, r18
     922:	15 d3       	rcall	.+1578   	; 0xf4e <__udivmodhi4>
     924:	89 2b       	or	r24, r25
     926:	29 f4       	brne	.+10     	; 0x932 <__vector_15+0x4a>
     928:	80 91 9f 01 	lds	r24, 0x019F
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	80 93 9f 01 	sts	0x019F, r24
		if(tickCounter % taskButtonsPeriod == 0) flagTaskButtons++;
     932:	60 91 08 01 	lds	r22, 0x0108
     936:	70 91 09 01 	lds	r23, 0x0109
     93a:	c9 01       	movw	r24, r18
     93c:	08 d3       	rcall	.+1552   	; 0xf4e <__udivmodhi4>
     93e:	89 2b       	or	r24, r25
     940:	29 f4       	brne	.+10     	; 0x94c <__vector_15+0x64>
     942:	80 91 9e 01 	lds	r24, 0x019E
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	80 93 9e 01 	sts	0x019E, r24
		if(tickCounter % taskMotorPeriod == 0) flagTaskMotor++;
     94c:	60 91 06 01 	lds	r22, 0x0106
     950:	70 91 07 01 	lds	r23, 0x0107
     954:	c9 01       	movw	r24, r18
     956:	fb d2       	rcall	.+1526   	; 0xf4e <__udivmodhi4>
     958:	89 2b       	or	r24, r25
     95a:	29 f4       	brne	.+10     	; 0x966 <__vector_15+0x7e>
     95c:	80 91 9d 01 	lds	r24, 0x019D
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 9d 01 	sts	0x019D, r24
		if(tickCounter % taskLcdPeriod ==0)flagTaskLcd++;
     966:	60 91 02 01 	lds	r22, 0x0102
     96a:	70 91 03 01 	lds	r23, 0x0103
     96e:	c9 01       	movw	r24, r18
     970:	ee d2       	rcall	.+1500   	; 0xf4e <__udivmodhi4>
     972:	89 2b       	or	r24, r25
     974:	29 f4       	brne	.+10     	; 0x980 <__vector_15+0x98>
     976:	80 91 9c 01 	lds	r24, 0x019C
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	80 93 9c 01 	sts	0x019C, r24
		
		
		// reload values // deve dar uns 5segundos
		if(tickCounter > schedulerMaxCount) tickCounter=0;
     980:	80 91 00 01 	lds	r24, 0x0100
     984:	90 91 01 01 	lds	r25, 0x0101
     988:	82 17       	cp	r24, r18
     98a:	93 07       	cpc	r25, r19
     98c:	20 f4       	brcc	.+8      	; 0x996 <__vector_15+0xae>
     98e:	10 92 a1 01 	sts	0x01A1, r1
     992:	10 92 a0 01 	sts	0x01A0, r1
	
}
     996:	bf 91       	pop	r27
     998:	af 91       	pop	r26
     99a:	9f 91       	pop	r25
     99c:	8f 91       	pop	r24
     99e:	7f 91       	pop	r23
     9a0:	6f 91       	pop	r22
     9a2:	5f 91       	pop	r21
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_16>:


/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                            */
/************************************************************************/
ISR(TIMER0_OVF_vect){
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
		
}
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
	
}
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	0b b6       	in	r0, 0x3b	; 59
     9e6:	0f 92       	push	r0
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
     a00:	a2 d2       	rcall	.+1348   	; 0xf46 <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
     a02:	61 d2       	rcall	.+1218   	; 0xec6 <USART1_sendChar>
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0b be       	out	0x3b, r0	; 59
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1

}
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1

}
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1

}
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1

}
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1

}
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1

}
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1

}
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1

}
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1

}
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1

}
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1

}
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	2f 93       	push	r18
     b16:	3f 93       	push	r19
     b18:	4f 93       	push	r20
     b1a:	5f 93       	push	r21
     b1c:	6f 93       	push	r22
     b1e:	7f 93       	push	r23
     b20:	8f 93       	push	r24
     b22:	9f 93       	push	r25
     b24:	af 93       	push	r26
     b26:	bf 93       	push	r27
     b28:	cf 93       	push	r28
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
     b2e:	ff d1       	rcall	.+1022   	; 0xf2e <USART1_receiveChar>
     b30:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
     b32:	05 d2       	rcall	.+1034   	; 0xf3e <USART0_sendChar>
	if(c== MSG_END_CARACTER){
     b34:	cc 37       	cpi	r28, 0x7C	; 124
     b36:	31 f4       	brne	.+12     	; 0xb44 <__vector_30+0x3e>
		nReceivedBytes=0;
     b38:	10 92 fc 01 	sts	0x01FC, r1
		flagNewMessage=1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 c9 01 	sts	0x01C9, r24
		return;
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
     b44:	e0 91 fc 01 	lds	r30, 0x01FC
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	e6 53       	subi	r30, 0x36	; 54
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	c0 83       	st	Z, r28
	nReceivedBytes++;
     b50:	80 91 fc 01 	lds	r24, 0x01FC
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 fc 01 	sts	0x01FC, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
     b5a:	80 91 fc 01 	lds	r24, 0x01FC
     b5e:	84 33       	cpi	r24, 0x34	; 52
     b60:	18 f0       	brcs	.+6      	; 0xb68 <__vector_30+0x62>
		nReceivedBytes=0;
     b62:	10 92 fc 01 	sts	0x01FC, r1
		clearBuffer();
     b66:	29 de       	rcall	.-942    	; 0x7ba <clearBuffer>
	}
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	cf 91       	pop	r28
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1

}
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1

}
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1

}
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1

}
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <LCD_sendChar>:
	LCD_gotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCD_sendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     be0:	98 2f       	mov	r25, r24
     be2:	90 7f       	andi	r25, 0xF0	; 240
     be4:	95 bb       	out	0x15, r25	; 21
     be6:	a8 9a       	sbi	0x15, 0	; 21
     be8:	aa 9a       	sbi	0x15, 2	; 21
     bea:	ef e8       	ldi	r30, 0x8F	; 143
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <LCD_sendChar+0xe>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <LCD_sendChar+0x14>
     bf4:	00 00       	nop
     bf6:	aa 98       	cbi	0x15, 2	; 21
     bf8:	a8 98       	cbi	0x15, 0	; 21
     bfa:	ef e8       	ldi	r30, 0x8F	; 143
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <LCD_sendChar+0x1e>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <LCD_sendChar+0x24>
     c04:	00 00       	nop
     c06:	f0 e1       	ldi	r31, 0x10	; 16
     c08:	8f 9f       	mul	r24, r31
     c0a:	c0 01       	movw	r24, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	85 bb       	out	0x15, r24	; 21
     c10:	a8 9a       	sbi	0x15, 0	; 21
     c12:	aa 9a       	sbi	0x15, 2	; 21
     c14:	8f e8       	ldi	r24, 0x8F	; 143
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <LCD_sendChar+0x38>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <LCD_sendChar+0x3e>
     c1e:	00 00       	nop
     c20:	aa 98       	cbi	0x15, 2	; 21
     c22:	a8 98       	cbi	0x15, 0	; 21
     c24:	ef e8       	ldi	r30, 0x8F	; 143
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <LCD_sendChar+0x48>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <LCD_sendChar+0x4e>
     c2e:	00 00       	nop
     c30:	08 95       	ret

00000c32 <LCD_sendCommand>:
     c32:	98 2f       	mov	r25, r24
     c34:	90 7f       	andi	r25, 0xF0	; 240
     c36:	95 bb       	out	0x15, r25	; 21
     c38:	aa 9a       	sbi	0x15, 2	; 21
     c3a:	ef e8       	ldi	r30, 0x8F	; 143
     c3c:	f1 e0       	ldi	r31, 0x01	; 1
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <LCD_sendCommand+0xc>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <LCD_sendCommand+0x12>
     c44:	00 00       	nop
     c46:	aa 98       	cbi	0x15, 2	; 21
     c48:	ef e8       	ldi	r30, 0x8F	; 143
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <LCD_sendCommand+0x1a>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <LCD_sendCommand+0x20>
     c52:	00 00       	nop
     c54:	f0 e1       	ldi	r31, 0x10	; 16
     c56:	8f 9f       	mul	r24, r31
     c58:	c0 01       	movw	r24, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	85 bb       	out	0x15, r24	; 21
     c5e:	aa 9a       	sbi	0x15, 2	; 21
     c60:	8f e8       	ldi	r24, 0x8F	; 143
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <LCD_sendCommand+0x32>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <LCD_sendCommand+0x38>
     c6a:	00 00       	nop
     c6c:	aa 98       	cbi	0x15, 2	; 21
     c6e:	ef e8       	ldi	r30, 0x8F	; 143
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <LCD_sendCommand+0x40>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <LCD_sendCommand+0x46>
     c78:	00 00       	nop
     c7a:	08 95       	ret

00000c7c <LCD_clr>:
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	d9 cf       	rjmp	.-78     	; 0xc32 <LCD_sendCommand>
     c80:	08 95       	ret

00000c82 <LCD_sendString>:
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	fc 01       	movw	r30, r24
     c8c:	01 90       	ld	r0, Z+
     c8e:	00 20       	and	r0, r0
     c90:	e9 f7       	brne	.-6      	; 0xc8c <LCD_sendString+0xa>
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	1e 2f       	mov	r17, r30
     c96:	18 1b       	sub	r17, r24
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	59 f0       	breq	.+22     	; 0xcb2 <LCD_sendString+0x30>
     c9c:	11 23       	and	r17, r17
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <LCD_sendString+0x30>
     ca0:	08 2f       	mov	r16, r24
     ca2:	c0 2f       	mov	r28, r16
     ca4:	d9 2f       	mov	r29, r25
     ca6:	89 91       	ld	r24, Y+
     ca8:	9b df       	rcall	.-202    	; 0xbe0 <LCD_sendChar>
     caa:	8c 2f       	mov	r24, r28
     cac:	80 1b       	sub	r24, r16
     cae:	81 17       	cp	r24, r17
     cb0:	d0 f3       	brcs	.-12     	; 0xca6 <LCD_sendString+0x24>
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <LCD_gotoXY>:
     cbc:	62 30       	cpi	r22, 0x02	; 2
     cbe:	31 f0       	breq	.+12     	; 0xccc <LCD_gotoXY+0x10>
     cc0:	63 30       	cpi	r22, 0x03	; 3
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <LCD_gotoXY+0x14>
     cc4:	61 30       	cpi	r22, 0x01	; 1
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <LCD_gotoXY+0x16>
     cc8:	80 5c       	subi	r24, 0xC0	; 192
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <LCD_gotoXY+0x16>
     ccc:	8c 5e       	subi	r24, 0xEC	; 236
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <LCD_gotoXY+0x16>
     cd0:	8c 5a       	subi	r24, 0xAC	; 172
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	ae cf       	rjmp	.-164    	; 0xc32 <LCD_sendCommand>
     cd6:	08 95       	ret

00000cd8 <LCD_defineChar>:


/************************************************************************/
/* @define char                                                                     */
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     ce6:	66 0f       	add	r22, r22
     ce8:	66 0f       	add	r22, r22
     cea:	66 0f       	add	r22, r22
     cec:	60 64       	ori	r22, 0x40	; 64
     cee:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
     cf0:	c0 e0       	ldi	r28, 0x00	; 0
     cf2:	d0 e0       	ldi	r29, 0x00	; 0
     cf4:	f8 01       	movw	r30, r16
     cf6:	ec 0f       	add	r30, r28
     cf8:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
     cfa:	f4 90       	lpm	r15, Z
		LCD_sendCommand(a++);
     cfc:	8c 2f       	mov	r24, r28
     cfe:	8e 0d       	add	r24, r14
     d00:	98 df       	rcall	.-208    	; 0xc32 <LCD_sendCommand>
		LCD_sendChar(pcc);
     d02:	8f 2d       	mov	r24, r15
     d04:	6d df       	rcall	.-294    	; 0xbe0 <LCD_sendChar>
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     d06:	21 96       	adiw	r28, 0x01	; 1
     d08:	c8 30       	cpi	r28, 0x08	; 8
     d0a:	d1 05       	cpc	r29, r1
     d0c:	99 f7       	brne	.-26     	; 0xcf4 <LCD_defineChar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_sendCommand(a++);
		LCD_sendChar(pcc);
		}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <LCD_init>:


/************************************************************************/
/* @init lcd                                                                     */
/************************************************************************/
void LCD_init(void){
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	8f e6       	ldi	r24, 0x6F	; 111
     d24:	97 e1       	ldi	r25, 0x17	; 23
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <LCD_init+0xa>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <LCD_init+0x10>
     d2c:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     d2e:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
     d30:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     d32:	84 b3       	in	r24, 0x14	; 20
     d34:	80 6f       	ori	r24, 0xF0	; 240
     d36:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     d38:	84 b3       	in	r24, 0x14	; 20
     d3a:	87 60       	ori	r24, 0x07	; 7
     d3c:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d3e:	80 e3       	ldi	r24, 0x30	; 48
     d40:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d42:	aa 9a       	sbi	0x15, 2	; 21
     d44:	8f e8       	ldi	r24, 0x8F	; 143
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <LCD_init+0x2c>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <LCD_init+0x32>
     d4e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d50:	aa 98       	cbi	0x15, 2	; 21
     d52:	8f e8       	ldi	r24, 0x8F	; 143
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <LCD_init+0x3a>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <LCD_init+0x40>
     d5c:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d5e:	80 e3       	ldi	r24, 0x30	; 48
     d60:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d62:	aa 9a       	sbi	0x15, 2	; 21
     d64:	8f e8       	ldi	r24, 0x8F	; 143
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <LCD_init+0x4c>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <LCD_init+0x52>
     d6e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d70:	aa 98       	cbi	0x15, 2	; 21
     d72:	8f e8       	ldi	r24, 0x8F	; 143
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <LCD_init+0x5a>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <LCD_init+0x60>
     d7c:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d82:	aa 9a       	sbi	0x15, 2	; 21
     d84:	8f e8       	ldi	r24, 0x8F	; 143
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <LCD_init+0x6c>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <LCD_init+0x72>
     d8e:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d90:	aa 98       	cbi	0x15, 2	; 21
     d92:	8f e8       	ldi	r24, 0x8F	; 143
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <LCD_init+0x7a>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <LCD_init+0x80>
     d9c:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCD_sendCommand(0b00101000);
     d9e:	88 e2       	ldi	r24, 0x28	; 40
     da0:	48 df       	rcall	.-368    	; 0xc32 <LCD_sendCommand>
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
     da2:	8c e0       	ldi	r24, 0x0C	; 12
     da4:	46 df       	rcall	.-372    	; 0xc32 <LCD_sendCommand>
     da6:	cc e8       	ldi	r28, 0x8C	; 140
     da8:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     daa:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     dac:	11 e0       	ldi	r17, 0x01	; 1
     dae:	16 0f       	add	r17, r22
     db0:	ce 01       	movw	r24, r28
     db2:	92 df       	rcall	.-220    	; 0xcd8 <LCD_defineChar>
     db4:	28 96       	adiw	r28, 0x08	; 8
	LCD_sendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     db6:	18 30       	cpi	r17, 0x08	; 8
     db8:	11 f0       	breq	.+4      	; 0xdbe <LCD_init+0xa2>
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     dba:	61 2f       	mov	r22, r17
     dbc:	f7 cf       	rjmp	.-18     	; 0xdac <LCD_init+0x90>
		LCD_defineChar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	08 95       	ret

00000dc6 <A498x_initMotorStruct>:
/************************************************************************/
/* @set motor speed														*/
/************************************************************************/
void A498x_setMotorSpeed(motor_t *m , uint16_t div){
	m->newTickDiv =div;
	m->flagNewMode++;
     dc6:	fc 01       	movw	r30, r24
     dc8:	12 82       	std	Z+2, r1	; 0x02
     dca:	13 82       	std	Z+3, r1	; 0x03
     dcc:	16 82       	std	Z+6, r1	; 0x06
     dce:	15 82       	std	Z+5, r1	; 0x05
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	84 83       	std	Z+4, r24	; 0x04
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	71 83       	std	Z+1, r23	; 0x01
     dd8:	60 83       	st	Z, r22
     dda:	16 86       	std	Z+14, r1	; 0x0e
     ddc:	08 95       	ret

00000dde <A498x_sendStep>:
     dde:	8f e8       	ldi	r24, 0x8F	; 143
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <A498x_sendStep+0x4>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <A498x_sendStep+0xa>
     de8:	00 00       	nop
     dea:	dd 9a       	sbi	0x1b, 5	; 27
     dec:	8f e8       	ldi	r24, 0x8F	; 143
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <A498x_sendStep+0x12>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <A498x_sendStep+0x18>
     df6:	00 00       	nop
     df8:	dd 98       	cbi	0x1b, 5	; 27
     dfa:	08 95       	ret

00000dfc <A498x_decodeFunction>:
     dfc:	fc 01       	movw	r30, r24
     dfe:	85 81       	ldd	r24, Z+5	; 0x05
     e00:	96 81       	ldd	r25, Z+6	; 0x06
     e02:	99 23       	and	r25, r25
     e04:	14 f4       	brge	.+4      	; 0xe0a <A498x_decodeFunction+0xe>
     e06:	12 82       	std	Z+2, r1	; 0x02
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <A498x_decodeFunction+0x12>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	82 83       	std	Z+2, r24	; 0x02
     e0e:	84 81       	ldd	r24, Z+4	; 0x04
     e10:	83 83       	std	Z+3, r24	; 0x03
     e12:	08 95       	ret

00000e14 <A498x_setOutputPins>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
     e1a:	f0 df       	rcall	.-32     	; 0xdfc <A498x_decodeFunction>
     e1c:	e8 81       	ld	r30, Y
     e1e:	f9 81       	ldd	r31, Y+1	; 0x01
     e20:	2b 81       	ldd	r18, Y+3	; 0x03
     e22:	22 0f       	add	r18, r18
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	30 e1       	ldi	r19, 0x10	; 16
     e28:	83 9f       	mul	r24, r19
     e2a:	c0 01       	movw	r24, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	82 2b       	or	r24, r18
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	89 2b       	or	r24, r25
     e34:	80 83       	st	Z, r24
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <A498x_updateNextStep>:
     e3c:	fc 01       	movw	r30, r24
     e3e:	86 85       	ldd	r24, Z+14	; 0x0e
     e40:	18 16       	cp	r1, r24
     e42:	6c f4       	brge	.+26     	; 0xe5e <A498x_updateNextStep+0x22>
     e44:	87 85       	ldd	r24, Z+15	; 0x0f
     e46:	90 89       	ldd	r25, Z+16	; 0x10
     e48:	96 83       	std	Z+6, r25	; 0x06
     e4a:	85 83       	std	Z+5, r24	; 0x05
     e4c:	85 85       	ldd	r24, Z+13	; 0x0d
     e4e:	84 83       	std	Z+4, r24	; 0x04
     e50:	82 89       	ldd	r24, Z+18	; 0x12
     e52:	80 87       	std	Z+8, r24	; 0x08
     e54:	83 89       	ldd	r24, Z+19	; 0x13
     e56:	94 89       	ldd	r25, Z+20	; 0x14
     e58:	92 87       	std	Z+10, r25	; 0x0a
     e5a:	81 87       	std	Z+9, r24	; 0x09
     e5c:	16 86       	std	Z+14, r1	; 0x0e
     e5e:	08 95       	ret

00000e60 <A498x_moveMotor>:
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
     e66:	ea df       	rcall	.-44     	; 0xe3c <A498x_updateNextStep>
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	89 2b       	or	r24, r25
     e6e:	19 f0       	breq	.+6      	; 0xe76 <A498x_moveMotor+0x16>
     e70:	ce 01       	movw	r24, r28
     e72:	d0 df       	rcall	.-96     	; 0xe14 <A498x_setOutputPins>
     e74:	b4 df       	rcall	.-152    	; 0xdde <A498x_sendStep>
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <A498x_setNewMotorMode>:
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	fc 01       	movw	r30, r24
     e82:	50 8b       	std	Z+16, r21	; 0x10
     e84:	47 87       	std	Z+15, r20	; 0x0f
     e86:	25 87       	std	Z+13, r18	; 0x0d
     e88:	62 8b       	std	Z+18, r22	; 0x12
     e8a:	14 8b       	std	Z+20, r17	; 0x14
     e8c:	03 8b       	std	Z+19, r16	; 0x13
     e8e:	86 85       	ldd	r24, Z+14	; 0x0e
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	86 87       	std	Z+14, r24	; 0x0e
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <A498x_setMotorStepMode>:
}

/************************************************************************/
/* @set motor stepMode                                                  */
/************************************************************************/
void A498x_setMotorStepMode(motor_t *m , uint8_t stepMode){
     e9a:	fc 01       	movw	r30, r24
	m->newStepMode=stepMode;
     e9c:	65 87       	std	Z+13, r22	; 0x0d
	m->flagNewMode++;
     e9e:	86 85       	ldd	r24, Z+14	; 0x0e
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	86 87       	std	Z+14, r24	; 0x0e
     ea4:	08 95       	ret

00000ea6 <A498x_setMotorDir>:
}

/************************************************************************/
/* @set dir                                                             */
/************************************************************************/
void A498x_setMotorDir(motor_t *m, int dir){
     ea6:	fc 01       	movw	r30, r24
	m->newDir=dir;
     ea8:	70 8b       	std	Z+16, r23	; 0x10
     eaa:	67 87       	std	Z+15, r22	; 0x0f
	m->flagNewMode++;
     eac:	86 85       	ldd	r24, Z+14	; 0x0e
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	86 87       	std	Z+14, r24	; 0x0e
     eb2:	08 95       	ret

00000eb4 <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
     eb4:	90 93 98 00 	sts	0x0098, r25
     eb8:	80 93 99 00 	sts	0x0099, r24
     ebc:	40 93 9a 00 	sts	0x009A, r20
     ec0:	60 93 9d 00 	sts	0x009D, r22
     ec4:	08 95       	ret

00000ec6 <USART1_sendChar>:
     ec6:	eb e9       	ldi	r30, 0x9B	; 155
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	90 81       	ld	r25, Z
     ecc:	95 ff       	sbrs	r25, 5
     ece:	fd cf       	rjmp	.-6      	; 0xeca <USART1_sendChar+0x4>
     ed0:	80 93 9c 00 	sts	0x009C, r24
     ed4:	08 95       	ret

00000ed6 <USART1_sendStr>:
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	fc 01       	movw	r30, r24
     ee4:	dc 01       	movw	r26, r24
     ee6:	0d 90       	ld	r0, X+
     ee8:	00 20       	and	r0, r0
     eea:	e9 f7       	brne	.-6      	; 0xee6 <USART1_sendStr+0x10>
     eec:	11 97       	sbiw	r26, 0x01	; 1
     eee:	7d 01       	movw	r14, r26
     ef0:	e8 1a       	sub	r14, r24
     ef2:	f9 0a       	sbc	r15, r25
     ef4:	1e 14       	cp	r1, r14
     ef6:	1f 04       	cpc	r1, r15
     ef8:	9c f4       	brge	.+38     	; 0xf20 <USART1_sendStr+0x4a>
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	81 f0       	breq	.+32     	; 0xf20 <USART1_sendStr+0x4a>
     f00:	8f 01       	movw	r16, r30
     f02:	0f 5f       	subi	r16, 0xFF	; 255
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <USART1_sendStr+0x40>
     f0c:	f8 01       	movw	r30, r16
     f0e:	81 91       	ld	r24, Z+
     f10:	8f 01       	movw	r16, r30
     f12:	88 23       	and	r24, r24
     f14:	29 f0       	breq	.+10     	; 0xf20 <USART1_sendStr+0x4a>
     f16:	d7 df       	rcall	.-82     	; 0xec6 <USART1_sendChar>
     f18:	21 96       	adiw	r28, 0x01	; 1
     f1a:	ec 16       	cp	r14, r28
     f1c:	fd 06       	cpc	r15, r29
     f1e:	b1 f7       	brne	.-20     	; 0xf0c <USART1_sendStr+0x36>
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	08 95       	ret

00000f2e <USART1_receiveChar>:
     f2e:	eb e9       	ldi	r30, 0x9B	; 155
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 23       	and	r24, r24
     f36:	ec f7       	brge	.-6      	; 0xf32 <USART1_receiveChar+0x4>
     f38:	80 91 9c 00 	lds	r24, 0x009C
     f3c:	08 95       	ret

00000f3e <USART0_sendChar>:
     f3e:	5d 9b       	sbis	0x0b, 5	; 11
     f40:	fe cf       	rjmp	.-4      	; 0xf3e <USART0_sendChar>
     f42:	8c b9       	out	0x0c, r24	; 12
     f44:	08 95       	ret

00000f46 <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
     f46:	5f 9b       	sbis	0x0b, 7	; 11
     f48:	fe cf       	rjmp	.-4      	; 0xf46 <USART0_receiveChar>
	
	return UDR0;
     f4a:	8c b1       	in	r24, 0x0c	; 12
}
     f4c:	08 95       	ret

00000f4e <__udivmodhi4>:
     f4e:	aa 1b       	sub	r26, r26
     f50:	bb 1b       	sub	r27, r27
     f52:	51 e1       	ldi	r21, 0x11	; 17
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__udivmodhi4_ep>

00000f56 <__udivmodhi4_loop>:
     f56:	aa 1f       	adc	r26, r26
     f58:	bb 1f       	adc	r27, r27
     f5a:	a6 17       	cp	r26, r22
     f5c:	b7 07       	cpc	r27, r23
     f5e:	10 f0       	brcs	.+4      	; 0xf64 <__udivmodhi4_ep>
     f60:	a6 1b       	sub	r26, r22
     f62:	b7 0b       	sbc	r27, r23

00000f64 <__udivmodhi4_ep>:
     f64:	88 1f       	adc	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	5a 95       	dec	r21
     f6a:	a9 f7       	brne	.-22     	; 0xf56 <__udivmodhi4_loop>
     f6c:	80 95       	com	r24
     f6e:	90 95       	com	r25
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	08 95       	ret

00000f76 <__udivmodsi4>:
     f76:	a1 e2       	ldi	r26, 0x21	; 33
     f78:	1a 2e       	mov	r1, r26
     f7a:	aa 1b       	sub	r26, r26
     f7c:	bb 1b       	sub	r27, r27
     f7e:	fd 01       	movw	r30, r26
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <__udivmodsi4_ep>

00000f82 <__udivmodsi4_loop>:
     f82:	aa 1f       	adc	r26, r26
     f84:	bb 1f       	adc	r27, r27
     f86:	ee 1f       	adc	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	a2 17       	cp	r26, r18
     f8c:	b3 07       	cpc	r27, r19
     f8e:	e4 07       	cpc	r30, r20
     f90:	f5 07       	cpc	r31, r21
     f92:	20 f0       	brcs	.+8      	; 0xf9c <__udivmodsi4_ep>
     f94:	a2 1b       	sub	r26, r18
     f96:	b3 0b       	sbc	r27, r19
     f98:	e4 0b       	sbc	r30, r20
     f9a:	f5 0b       	sbc	r31, r21

00000f9c <__udivmodsi4_ep>:
     f9c:	66 1f       	adc	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	1a 94       	dec	r1
     fa6:	69 f7       	brne	.-38     	; 0xf82 <__udivmodsi4_loop>
     fa8:	60 95       	com	r22
     faa:	70 95       	com	r23
     fac:	80 95       	com	r24
     fae:	90 95       	com	r25
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	bd 01       	movw	r22, r26
     fb6:	cf 01       	movw	r24, r30
     fb8:	08 95       	ret

00000fba <__umulhisi3>:
     fba:	a2 9f       	mul	r26, r18
     fbc:	b0 01       	movw	r22, r0
     fbe:	b3 9f       	mul	r27, r19
     fc0:	c0 01       	movw	r24, r0
     fc2:	a3 9f       	mul	r26, r19
     fc4:	70 0d       	add	r23, r0
     fc6:	81 1d       	adc	r24, r1
     fc8:	11 24       	eor	r1, r1
     fca:	91 1d       	adc	r25, r1
     fcc:	b2 9f       	mul	r27, r18
     fce:	70 0d       	add	r23, r0
     fd0:	81 1d       	adc	r24, r1
     fd2:	11 24       	eor	r1, r1
     fd4:	91 1d       	adc	r25, r1
     fd6:	08 95       	ret

00000fd8 <sprintf>:
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	2e 97       	sbiw	r28, 0x0e	; 14
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	0d 89       	ldd	r16, Y+21	; 0x15
     ff2:	1e 89       	ldd	r17, Y+22	; 0x16
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	1a 83       	std	Y+2, r17	; 0x02
     ffa:	09 83       	std	Y+1, r16	; 0x01
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f e7       	ldi	r25, 0x7F	; 127
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	ae 01       	movw	r20, r28
    1006:	47 5e       	subi	r20, 0xE7	; 231
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	6f 89       	ldd	r22, Y+23	; 0x17
    100c:	78 8d       	ldd	r23, Y+24	; 0x18
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	10 d0       	rcall	.+32     	; 0x1034 <vfprintf>
    1014:	ef 81       	ldd	r30, Y+7	; 0x07
    1016:	f8 85       	ldd	r31, Y+8	; 0x08
    1018:	e0 0f       	add	r30, r16
    101a:	f1 1f       	adc	r31, r17
    101c:	10 82       	st	Z, r1
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <vfprintf>:
    1034:	2f 92       	push	r2
    1036:	3f 92       	push	r3
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2c 97       	sbiw	r28, 0x0c	; 12
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	7c 01       	movw	r14, r24
    106a:	6b 01       	movw	r12, r22
    106c:	8a 01       	movw	r16, r20
    106e:	fc 01       	movw	r30, r24
    1070:	17 82       	std	Z+7, r1	; 0x07
    1072:	16 82       	std	Z+6, r1	; 0x06
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	81 ff       	sbrs	r24, 1
    1078:	b0 c1       	rjmp	.+864    	; 0x13da <__stack+0x2db>
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	4c 01       	movw	r8, r24
    1080:	f7 01       	movw	r30, r14
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	f6 01       	movw	r30, r12
    1086:	93 fd       	sbrc	r25, 3
    1088:	85 91       	lpm	r24, Z+
    108a:	93 ff       	sbrs	r25, 3
    108c:	81 91       	ld	r24, Z+
    108e:	6f 01       	movw	r12, r30
    1090:	88 23       	and	r24, r24
    1092:	09 f4       	brne	.+2      	; 0x1096 <vfprintf+0x62>
    1094:	9e c1       	rjmp	.+828    	; 0x13d2 <__stack+0x2d3>
    1096:	85 32       	cpi	r24, 0x25	; 37
    1098:	39 f4       	brne	.+14     	; 0x10a8 <vfprintf+0x74>
    109a:	93 fd       	sbrc	r25, 3
    109c:	85 91       	lpm	r24, Z+
    109e:	93 ff       	sbrs	r25, 3
    10a0:	81 91       	ld	r24, Z+
    10a2:	6f 01       	movw	r12, r30
    10a4:	85 32       	cpi	r24, 0x25	; 37
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <vfprintf+0x7c>
    10a8:	b7 01       	movw	r22, r14
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	c7 d1       	rcall	.+910    	; 0x143c <fputc>
    10ae:	e8 cf       	rjmp	.-48     	; 0x1080 <vfprintf+0x4c>
    10b0:	51 2c       	mov	r5, r1
    10b2:	31 2c       	mov	r3, r1
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	20 32       	cpi	r18, 0x20	; 32
    10b8:	a0 f4       	brcc	.+40     	; 0x10e2 <vfprintf+0xae>
    10ba:	8b 32       	cpi	r24, 0x2B	; 43
    10bc:	69 f0       	breq	.+26     	; 0x10d8 <vfprintf+0xa4>
    10be:	30 f4       	brcc	.+12     	; 0x10cc <vfprintf+0x98>
    10c0:	80 32       	cpi	r24, 0x20	; 32
    10c2:	59 f0       	breq	.+22     	; 0x10da <vfprintf+0xa6>
    10c4:	83 32       	cpi	r24, 0x23	; 35
    10c6:	69 f4       	brne	.+26     	; 0x10e2 <vfprintf+0xae>
    10c8:	20 61       	ori	r18, 0x10	; 16
    10ca:	2c c0       	rjmp	.+88     	; 0x1124 <__stack+0x25>
    10cc:	8d 32       	cpi	r24, 0x2D	; 45
    10ce:	39 f0       	breq	.+14     	; 0x10de <vfprintf+0xaa>
    10d0:	80 33       	cpi	r24, 0x30	; 48
    10d2:	39 f4       	brne	.+14     	; 0x10e2 <vfprintf+0xae>
    10d4:	21 60       	ori	r18, 0x01	; 1
    10d6:	26 c0       	rjmp	.+76     	; 0x1124 <__stack+0x25>
    10d8:	22 60       	ori	r18, 0x02	; 2
    10da:	24 60       	ori	r18, 0x04	; 4
    10dc:	23 c0       	rjmp	.+70     	; 0x1124 <__stack+0x25>
    10de:	28 60       	ori	r18, 0x08	; 8
    10e0:	21 c0       	rjmp	.+66     	; 0x1124 <__stack+0x25>
    10e2:	27 fd       	sbrc	r18, 7
    10e4:	27 c0       	rjmp	.+78     	; 0x1134 <__stack+0x35>
    10e6:	30 ed       	ldi	r19, 0xD0	; 208
    10e8:	38 0f       	add	r19, r24
    10ea:	3a 30       	cpi	r19, 0x0A	; 10
    10ec:	78 f4       	brcc	.+30     	; 0x110c <__stack+0xd>
    10ee:	26 ff       	sbrs	r18, 6
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0xca>
    10f2:	fa e0       	ldi	r31, 0x0A	; 10
    10f4:	5f 9e       	mul	r5, r31
    10f6:	30 0d       	add	r19, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	53 2e       	mov	r5, r19
    10fc:	13 c0       	rjmp	.+38     	; 0x1124 <__stack+0x25>
    10fe:	8a e0       	ldi	r24, 0x0A	; 10
    1100:	38 9e       	mul	r3, r24
    1102:	30 0d       	add	r19, r0
    1104:	11 24       	eor	r1, r1
    1106:	33 2e       	mov	r3, r19
    1108:	20 62       	ori	r18, 0x20	; 32
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <__stack+0x25>
    110c:	8e 32       	cpi	r24, 0x2E	; 46
    110e:	21 f4       	brne	.+8      	; 0x1118 <__stack+0x19>
    1110:	26 fd       	sbrc	r18, 6
    1112:	5f c1       	rjmp	.+702    	; 0x13d2 <__stack+0x2d3>
    1114:	20 64       	ori	r18, 0x40	; 64
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <__stack+0x25>
    1118:	8c 36       	cpi	r24, 0x6C	; 108
    111a:	11 f4       	brne	.+4      	; 0x1120 <__stack+0x21>
    111c:	20 68       	ori	r18, 0x80	; 128
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <__stack+0x25>
    1120:	88 36       	cpi	r24, 0x68	; 104
    1122:	41 f4       	brne	.+16     	; 0x1134 <__stack+0x35>
    1124:	f6 01       	movw	r30, r12
    1126:	93 fd       	sbrc	r25, 3
    1128:	85 91       	lpm	r24, Z+
    112a:	93 ff       	sbrs	r25, 3
    112c:	81 91       	ld	r24, Z+
    112e:	6f 01       	movw	r12, r30
    1130:	81 11       	cpse	r24, r1
    1132:	c1 cf       	rjmp	.-126    	; 0x10b6 <vfprintf+0x82>
    1134:	98 2f       	mov	r25, r24
    1136:	9f 7d       	andi	r25, 0xDF	; 223
    1138:	95 54       	subi	r25, 0x45	; 69
    113a:	93 30       	cpi	r25, 0x03	; 3
    113c:	28 f4       	brcc	.+10     	; 0x1148 <__stack+0x49>
    113e:	0c 5f       	subi	r16, 0xFC	; 252
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	ff e3       	ldi	r31, 0x3F	; 63
    1144:	f9 83       	std	Y+1, r31	; 0x01
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <__stack+0x63>
    1148:	83 36       	cpi	r24, 0x63	; 99
    114a:	31 f0       	breq	.+12     	; 0x1158 <__stack+0x59>
    114c:	83 37       	cpi	r24, 0x73	; 115
    114e:	71 f0       	breq	.+28     	; 0x116c <__stack+0x6d>
    1150:	83 35       	cpi	r24, 0x53	; 83
    1152:	09 f0       	breq	.+2      	; 0x1156 <__stack+0x57>
    1154:	57 c0       	rjmp	.+174    	; 0x1204 <__stack+0x105>
    1156:	21 c0       	rjmp	.+66     	; 0x119a <__stack+0x9b>
    1158:	f8 01       	movw	r30, r16
    115a:	80 81       	ld	r24, Z
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	0e 5f       	subi	r16, 0xFE	; 254
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	44 24       	eor	r4, r4
    1164:	43 94       	inc	r4
    1166:	51 2c       	mov	r5, r1
    1168:	54 01       	movw	r10, r8
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <__stack+0x95>
    116c:	38 01       	movw	r6, r16
    116e:	f2 e0       	ldi	r31, 0x02	; 2
    1170:	6f 0e       	add	r6, r31
    1172:	71 1c       	adc	r7, r1
    1174:	f8 01       	movw	r30, r16
    1176:	a0 80       	ld	r10, Z
    1178:	b1 80       	ldd	r11, Z+1	; 0x01
    117a:	26 ff       	sbrs	r18, 6
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <__stack+0x85>
    117e:	65 2d       	mov	r22, r5
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <__stack+0x89>
    1184:	6f ef       	ldi	r22, 0xFF	; 255
    1186:	7f ef       	ldi	r23, 0xFF	; 255
    1188:	c5 01       	movw	r24, r10
    118a:	2c 87       	std	Y+12, r18	; 0x0c
    118c:	4c d1       	rcall	.+664    	; 0x1426 <strnlen>
    118e:	2c 01       	movw	r4, r24
    1190:	83 01       	movw	r16, r6
    1192:	2c 85       	ldd	r18, Y+12	; 0x0c
    1194:	2f 77       	andi	r18, 0x7F	; 127
    1196:	22 2e       	mov	r2, r18
    1198:	16 c0       	rjmp	.+44     	; 0x11c6 <__stack+0xc7>
    119a:	38 01       	movw	r6, r16
    119c:	f2 e0       	ldi	r31, 0x02	; 2
    119e:	6f 0e       	add	r6, r31
    11a0:	71 1c       	adc	r7, r1
    11a2:	f8 01       	movw	r30, r16
    11a4:	a0 80       	ld	r10, Z
    11a6:	b1 80       	ldd	r11, Z+1	; 0x01
    11a8:	26 ff       	sbrs	r18, 6
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <__stack+0xb3>
    11ac:	65 2d       	mov	r22, r5
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <__stack+0xb7>
    11b2:	6f ef       	ldi	r22, 0xFF	; 255
    11b4:	7f ef       	ldi	r23, 0xFF	; 255
    11b6:	c5 01       	movw	r24, r10
    11b8:	2c 87       	std	Y+12, r18	; 0x0c
    11ba:	2a d1       	rcall	.+596    	; 0x1410 <strnlen_P>
    11bc:	2c 01       	movw	r4, r24
    11be:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c0:	20 68       	ori	r18, 0x80	; 128
    11c2:	22 2e       	mov	r2, r18
    11c4:	83 01       	movw	r16, r6
    11c6:	23 fc       	sbrc	r2, 3
    11c8:	19 c0       	rjmp	.+50     	; 0x11fc <__stack+0xfd>
    11ca:	83 2d       	mov	r24, r3
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	48 16       	cp	r4, r24
    11d0:	59 06       	cpc	r5, r25
    11d2:	a0 f4       	brcc	.+40     	; 0x11fc <__stack+0xfd>
    11d4:	b7 01       	movw	r22, r14
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	30 d1       	rcall	.+608    	; 0x143c <fputc>
    11dc:	3a 94       	dec	r3
    11de:	f5 cf       	rjmp	.-22     	; 0x11ca <__stack+0xcb>
    11e0:	f5 01       	movw	r30, r10
    11e2:	27 fc       	sbrc	r2, 7
    11e4:	85 91       	lpm	r24, Z+
    11e6:	27 fe       	sbrs	r2, 7
    11e8:	81 91       	ld	r24, Z+
    11ea:	5f 01       	movw	r10, r30
    11ec:	b7 01       	movw	r22, r14
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	25 d1       	rcall	.+586    	; 0x143c <fputc>
    11f2:	31 10       	cpse	r3, r1
    11f4:	3a 94       	dec	r3
    11f6:	f1 e0       	ldi	r31, 0x01	; 1
    11f8:	4f 1a       	sub	r4, r31
    11fa:	51 08       	sbc	r5, r1
    11fc:	41 14       	cp	r4, r1
    11fe:	51 04       	cpc	r5, r1
    1200:	79 f7       	brne	.-34     	; 0x11e0 <__stack+0xe1>
    1202:	de c0       	rjmp	.+444    	; 0x13c0 <__stack+0x2c1>
    1204:	84 36       	cpi	r24, 0x64	; 100
    1206:	11 f0       	breq	.+4      	; 0x120c <__stack+0x10d>
    1208:	89 36       	cpi	r24, 0x69	; 105
    120a:	31 f5       	brne	.+76     	; 0x1258 <__stack+0x159>
    120c:	f8 01       	movw	r30, r16
    120e:	27 ff       	sbrs	r18, 7
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <__stack+0x121>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0c 5f       	subi	r16, 0xFC	; 252
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <__stack+0x131>
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	88 27       	eor	r24, r24
    1226:	77 fd       	sbrc	r23, 7
    1228:	80 95       	com	r24
    122a:	98 2f       	mov	r25, r24
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	2f 76       	andi	r18, 0x6F	; 111
    1232:	b2 2e       	mov	r11, r18
    1234:	97 ff       	sbrs	r25, 7
    1236:	09 c0       	rjmp	.+18     	; 0x124a <__stack+0x14b>
    1238:	90 95       	com	r25
    123a:	80 95       	com	r24
    123c:	70 95       	com	r23
    123e:	61 95       	neg	r22
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	8f 4f       	sbci	r24, 0xFF	; 255
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	20 68       	ori	r18, 0x80	; 128
    1248:	b2 2e       	mov	r11, r18
    124a:	2a e0       	ldi	r18, 0x0A	; 10
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	a4 01       	movw	r20, r8
    1250:	27 d1       	rcall	.+590    	; 0x14a0 <__ultoa_invert>
    1252:	a8 2e       	mov	r10, r24
    1254:	a8 18       	sub	r10, r8
    1256:	43 c0       	rjmp	.+134    	; 0x12de <__stack+0x1df>
    1258:	85 37       	cpi	r24, 0x75	; 117
    125a:	29 f4       	brne	.+10     	; 0x1266 <__stack+0x167>
    125c:	2f 7e       	andi	r18, 0xEF	; 239
    125e:	b2 2e       	mov	r11, r18
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	25 c0       	rjmp	.+74     	; 0x12b0 <__stack+0x1b1>
    1266:	f2 2f       	mov	r31, r18
    1268:	f9 7f       	andi	r31, 0xF9	; 249
    126a:	bf 2e       	mov	r11, r31
    126c:	8f 36       	cpi	r24, 0x6F	; 111
    126e:	c1 f0       	breq	.+48     	; 0x12a0 <__stack+0x1a1>
    1270:	18 f4       	brcc	.+6      	; 0x1278 <__stack+0x179>
    1272:	88 35       	cpi	r24, 0x58	; 88
    1274:	79 f0       	breq	.+30     	; 0x1294 <__stack+0x195>
    1276:	ad c0       	rjmp	.+346    	; 0x13d2 <__stack+0x2d3>
    1278:	80 37       	cpi	r24, 0x70	; 112
    127a:	19 f0       	breq	.+6      	; 0x1282 <__stack+0x183>
    127c:	88 37       	cpi	r24, 0x78	; 120
    127e:	21 f0       	breq	.+8      	; 0x1288 <__stack+0x189>
    1280:	a8 c0       	rjmp	.+336    	; 0x13d2 <__stack+0x2d3>
    1282:	2f 2f       	mov	r18, r31
    1284:	20 61       	ori	r18, 0x10	; 16
    1286:	b2 2e       	mov	r11, r18
    1288:	b4 fe       	sbrs	r11, 4
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <__stack+0x1a7>
    128c:	8b 2d       	mov	r24, r11
    128e:	84 60       	ori	r24, 0x04	; 4
    1290:	b8 2e       	mov	r11, r24
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <__stack+0x1a7>
    1294:	24 ff       	sbrs	r18, 4
    1296:	0a c0       	rjmp	.+20     	; 0x12ac <__stack+0x1ad>
    1298:	9f 2f       	mov	r25, r31
    129a:	96 60       	ori	r25, 0x06	; 6
    129c:	b9 2e       	mov	r11, r25
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <__stack+0x1ad>
    12a0:	28 e0       	ldi	r18, 0x08	; 8
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <__stack+0x1b1>
    12a6:	20 e1       	ldi	r18, 0x10	; 16
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <__stack+0x1b1>
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	32 e0       	ldi	r19, 0x02	; 2
    12b0:	f8 01       	movw	r30, r16
    12b2:	b7 fe       	sbrs	r11, 7
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <__stack+0x1c5>
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0c 5f       	subi	r16, 0xFC	; 252
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <__stack+0x1d1>
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 5f       	subi	r16, 0xFE	; 254
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	a4 01       	movw	r20, r8
    12d2:	e6 d0       	rcall	.+460    	; 0x14a0 <__ultoa_invert>
    12d4:	a8 2e       	mov	r10, r24
    12d6:	a8 18       	sub	r10, r8
    12d8:	fb 2d       	mov	r31, r11
    12da:	ff 77       	andi	r31, 0x7F	; 127
    12dc:	bf 2e       	mov	r11, r31
    12de:	b6 fe       	sbrs	r11, 6
    12e0:	0b c0       	rjmp	.+22     	; 0x12f8 <__stack+0x1f9>
    12e2:	2b 2d       	mov	r18, r11
    12e4:	2e 7f       	andi	r18, 0xFE	; 254
    12e6:	a5 14       	cp	r10, r5
    12e8:	50 f4       	brcc	.+20     	; 0x12fe <__stack+0x1ff>
    12ea:	b4 fe       	sbrs	r11, 4
    12ec:	0a c0       	rjmp	.+20     	; 0x1302 <__stack+0x203>
    12ee:	b2 fc       	sbrc	r11, 2
    12f0:	08 c0       	rjmp	.+16     	; 0x1302 <__stack+0x203>
    12f2:	2b 2d       	mov	r18, r11
    12f4:	2e 7e       	andi	r18, 0xEE	; 238
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <__stack+0x203>
    12f8:	7a 2c       	mov	r7, r10
    12fa:	2b 2d       	mov	r18, r11
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <__stack+0x205>
    12fe:	7a 2c       	mov	r7, r10
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <__stack+0x205>
    1302:	75 2c       	mov	r7, r5
    1304:	24 ff       	sbrs	r18, 4
    1306:	0d c0       	rjmp	.+26     	; 0x1322 <__stack+0x223>
    1308:	fe 01       	movw	r30, r28
    130a:	ea 0d       	add	r30, r10
    130c:	f1 1d       	adc	r31, r1
    130e:	80 81       	ld	r24, Z
    1310:	80 33       	cpi	r24, 0x30	; 48
    1312:	11 f4       	brne	.+4      	; 0x1318 <__stack+0x219>
    1314:	29 7e       	andi	r18, 0xE9	; 233
    1316:	09 c0       	rjmp	.+18     	; 0x132a <__stack+0x22b>
    1318:	22 ff       	sbrs	r18, 2
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <__stack+0x229>
    131c:	73 94       	inc	r7
    131e:	73 94       	inc	r7
    1320:	04 c0       	rjmp	.+8      	; 0x132a <__stack+0x22b>
    1322:	82 2f       	mov	r24, r18
    1324:	86 78       	andi	r24, 0x86	; 134
    1326:	09 f0       	breq	.+2      	; 0x132a <__stack+0x22b>
    1328:	73 94       	inc	r7
    132a:	23 fd       	sbrc	r18, 3
    132c:	12 c0       	rjmp	.+36     	; 0x1352 <__stack+0x253>
    132e:	20 ff       	sbrs	r18, 0
    1330:	06 c0       	rjmp	.+12     	; 0x133e <__stack+0x23f>
    1332:	5a 2c       	mov	r5, r10
    1334:	73 14       	cp	r7, r3
    1336:	18 f4       	brcc	.+6      	; 0x133e <__stack+0x23f>
    1338:	53 0c       	add	r5, r3
    133a:	57 18       	sub	r5, r7
    133c:	73 2c       	mov	r7, r3
    133e:	73 14       	cp	r7, r3
    1340:	60 f4       	brcc	.+24     	; 0x135a <__stack+0x25b>
    1342:	b7 01       	movw	r22, r14
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	2c 87       	std	Y+12, r18	; 0x0c
    134a:	78 d0       	rcall	.+240    	; 0x143c <fputc>
    134c:	73 94       	inc	r7
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	f6 cf       	rjmp	.-20     	; 0x133e <__stack+0x23f>
    1352:	73 14       	cp	r7, r3
    1354:	10 f4       	brcc	.+4      	; 0x135a <__stack+0x25b>
    1356:	37 18       	sub	r3, r7
    1358:	01 c0       	rjmp	.+2      	; 0x135c <__stack+0x25d>
    135a:	31 2c       	mov	r3, r1
    135c:	24 ff       	sbrs	r18, 4
    135e:	11 c0       	rjmp	.+34     	; 0x1382 <__stack+0x283>
    1360:	b7 01       	movw	r22, r14
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2c 87       	std	Y+12, r18	; 0x0c
    1368:	69 d0       	rcall	.+210    	; 0x143c <fputc>
    136a:	2c 85       	ldd	r18, Y+12	; 0x0c
    136c:	22 ff       	sbrs	r18, 2
    136e:	16 c0       	rjmp	.+44     	; 0x139c <__stack+0x29d>
    1370:	21 ff       	sbrs	r18, 1
    1372:	03 c0       	rjmp	.+6      	; 0x137a <__stack+0x27b>
    1374:	88 e5       	ldi	r24, 0x58	; 88
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <__stack+0x27f>
    137a:	88 e7       	ldi	r24, 0x78	; 120
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	b7 01       	movw	r22, r14
    1380:	0c c0       	rjmp	.+24     	; 0x139a <__stack+0x29b>
    1382:	82 2f       	mov	r24, r18
    1384:	86 78       	andi	r24, 0x86	; 134
    1386:	51 f0       	breq	.+20     	; 0x139c <__stack+0x29d>
    1388:	21 fd       	sbrc	r18, 1
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <__stack+0x291>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <__stack+0x293>
    1390:	8b e2       	ldi	r24, 0x2B	; 43
    1392:	27 fd       	sbrc	r18, 7
    1394:	8d e2       	ldi	r24, 0x2D	; 45
    1396:	b7 01       	movw	r22, r14
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	50 d0       	rcall	.+160    	; 0x143c <fputc>
    139c:	a5 14       	cp	r10, r5
    139e:	30 f4       	brcc	.+12     	; 0x13ac <__stack+0x2ad>
    13a0:	b7 01       	movw	r22, r14
    13a2:	80 e3       	ldi	r24, 0x30	; 48
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	4a d0       	rcall	.+148    	; 0x143c <fputc>
    13a8:	5a 94       	dec	r5
    13aa:	f8 cf       	rjmp	.-16     	; 0x139c <__stack+0x29d>
    13ac:	aa 94       	dec	r10
    13ae:	f4 01       	movw	r30, r8
    13b0:	ea 0d       	add	r30, r10
    13b2:	f1 1d       	adc	r31, r1
    13b4:	80 81       	ld	r24, Z
    13b6:	b7 01       	movw	r22, r14
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	40 d0       	rcall	.+128    	; 0x143c <fputc>
    13bc:	a1 10       	cpse	r10, r1
    13be:	f6 cf       	rjmp	.-20     	; 0x13ac <__stack+0x2ad>
    13c0:	33 20       	and	r3, r3
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <__stack+0x2c7>
    13c4:	5d ce       	rjmp	.-838    	; 0x1080 <vfprintf+0x4c>
    13c6:	b7 01       	movw	r22, r14
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	37 d0       	rcall	.+110    	; 0x143c <fputc>
    13ce:	3a 94       	dec	r3
    13d0:	f7 cf       	rjmp	.-18     	; 0x13c0 <__stack+0x2c1>
    13d2:	f7 01       	movw	r30, r14
    13d4:	86 81       	ldd	r24, Z+6	; 0x06
    13d6:	97 81       	ldd	r25, Z+7	; 0x07
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <__stack+0x2df>
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	2c 96       	adiw	r28, 0x0c	; 12
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	3f 90       	pop	r3
    140c:	2f 90       	pop	r2
    140e:	08 95       	ret

00001410 <strnlen_P>:
    1410:	fc 01       	movw	r30, r24
    1412:	05 90       	lpm	r0, Z+
    1414:	61 50       	subi	r22, 0x01	; 1
    1416:	70 40       	sbci	r23, 0x00	; 0
    1418:	01 10       	cpse	r0, r1
    141a:	d8 f7       	brcc	.-10     	; 0x1412 <strnlen_P+0x2>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	8e 0f       	add	r24, r30
    1422:	9f 1f       	adc	r25, r31
    1424:	08 95       	ret

00001426 <strnlen>:
    1426:	fc 01       	movw	r30, r24
    1428:	61 50       	subi	r22, 0x01	; 1
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	01 90       	ld	r0, Z+
    142e:	01 10       	cpse	r0, r1
    1430:	d8 f7       	brcc	.-10     	; 0x1428 <strnlen+0x2>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	8e 0f       	add	r24, r30
    1438:	9f 1f       	adc	r25, r31
    143a:	08 95       	ret

0000143c <fputc>:
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	18 2f       	mov	r17, r24
    1446:	09 2f       	mov	r16, r25
    1448:	eb 01       	movw	r28, r22
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	81 fd       	sbrc	r24, 1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <fputc+0x1a>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <fputc+0x5a>
    1456:	82 ff       	sbrs	r24, 2
    1458:	10 c0       	rjmp	.+32     	; 0x147a <fputc+0x3e>
    145a:	4e 81       	ldd	r20, Y+6	; 0x06
    145c:	5f 81       	ldd	r21, Y+7	; 0x07
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	42 17       	cp	r20, r18
    1464:	53 07       	cpc	r21, r19
    1466:	7c f4       	brge	.+30     	; 0x1486 <fputc+0x4a>
    1468:	e8 81       	ld	r30, Y
    146a:	f9 81       	ldd	r31, Y+1	; 0x01
    146c:	9f 01       	movw	r18, r30
    146e:	2f 5f       	subi	r18, 0xFF	; 255
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	39 83       	std	Y+1, r19	; 0x01
    1474:	28 83       	st	Y, r18
    1476:	10 83       	st	Z, r17
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <fputc+0x4a>
    147a:	e8 85       	ldd	r30, Y+8	; 0x08
    147c:	f9 85       	ldd	r31, Y+9	; 0x09
    147e:	81 2f       	mov	r24, r17
    1480:	09 95       	icall
    1482:	89 2b       	or	r24, r25
    1484:	29 f7       	brne	.-54     	; 0x1450 <fputc+0x14>
    1486:	2e 81       	ldd	r18, Y+6	; 0x06
    1488:	3f 81       	ldd	r19, Y+7	; 0x07
    148a:	2f 5f       	subi	r18, 0xFF	; 255
    148c:	3f 4f       	sbci	r19, 0xFF	; 255
    148e:	3f 83       	std	Y+7, r19	; 0x07
    1490:	2e 83       	std	Y+6, r18	; 0x06
    1492:	81 2f       	mov	r24, r17
    1494:	90 2f       	mov	r25, r16
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <__ultoa_invert>:
    14a0:	fa 01       	movw	r30, r20
    14a2:	aa 27       	eor	r26, r26
    14a4:	28 30       	cpi	r18, 0x08	; 8
    14a6:	51 f1       	breq	.+84     	; 0x14fc <__ultoa_invert+0x5c>
    14a8:	20 31       	cpi	r18, 0x10	; 16
    14aa:	81 f1       	breq	.+96     	; 0x150c <__ultoa_invert+0x6c>
    14ac:	e8 94       	clt
    14ae:	6f 93       	push	r22
    14b0:	6e 7f       	andi	r22, 0xFE	; 254
    14b2:	6e 5f       	subi	r22, 0xFE	; 254
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	8f 4f       	sbci	r24, 0xFF	; 255
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	af 4f       	sbci	r26, 0xFF	; 255
    14bc:	b1 e0       	ldi	r27, 0x01	; 1
    14be:	3e d0       	rcall	.+124    	; 0x153c <__ultoa_invert+0x9c>
    14c0:	b4 e0       	ldi	r27, 0x04	; 4
    14c2:	3c d0       	rcall	.+120    	; 0x153c <__ultoa_invert+0x9c>
    14c4:	67 0f       	add	r22, r23
    14c6:	78 1f       	adc	r23, r24
    14c8:	89 1f       	adc	r24, r25
    14ca:	9a 1f       	adc	r25, r26
    14cc:	a1 1d       	adc	r26, r1
    14ce:	68 0f       	add	r22, r24
    14d0:	79 1f       	adc	r23, r25
    14d2:	8a 1f       	adc	r24, r26
    14d4:	91 1d       	adc	r25, r1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	6a 0f       	add	r22, r26
    14da:	71 1d       	adc	r23, r1
    14dc:	81 1d       	adc	r24, r1
    14de:	91 1d       	adc	r25, r1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	20 d0       	rcall	.+64     	; 0x1524 <__ultoa_invert+0x84>
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__ultoa_invert+0x48>
    14e6:	68 94       	set
    14e8:	3f 91       	pop	r19
    14ea:	2a e0       	ldi	r18, 0x0A	; 10
    14ec:	26 9f       	mul	r18, r22
    14ee:	11 24       	eor	r1, r1
    14f0:	30 19       	sub	r19, r0
    14f2:	30 5d       	subi	r19, 0xD0	; 208
    14f4:	31 93       	st	Z+, r19
    14f6:	de f6       	brtc	.-74     	; 0x14ae <__ultoa_invert+0xe>
    14f8:	cf 01       	movw	r24, r30
    14fa:	08 95       	ret
    14fc:	46 2f       	mov	r20, r22
    14fe:	47 70       	andi	r20, 0x07	; 7
    1500:	40 5d       	subi	r20, 0xD0	; 208
    1502:	41 93       	st	Z+, r20
    1504:	b3 e0       	ldi	r27, 0x03	; 3
    1506:	0f d0       	rcall	.+30     	; 0x1526 <__ultoa_invert+0x86>
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__ultoa_invert+0x5c>
    150a:	f6 cf       	rjmp	.-20     	; 0x14f8 <__ultoa_invert+0x58>
    150c:	46 2f       	mov	r20, r22
    150e:	4f 70       	andi	r20, 0x0F	; 15
    1510:	40 5d       	subi	r20, 0xD0	; 208
    1512:	4a 33       	cpi	r20, 0x3A	; 58
    1514:	18 f0       	brcs	.+6      	; 0x151c <__ultoa_invert+0x7c>
    1516:	49 5d       	subi	r20, 0xD9	; 217
    1518:	31 fd       	sbrc	r19, 1
    151a:	40 52       	subi	r20, 0x20	; 32
    151c:	41 93       	st	Z+, r20
    151e:	02 d0       	rcall	.+4      	; 0x1524 <__ultoa_invert+0x84>
    1520:	a9 f7       	brne	.-22     	; 0x150c <__ultoa_invert+0x6c>
    1522:	ea cf       	rjmp	.-44     	; 0x14f8 <__ultoa_invert+0x58>
    1524:	b4 e0       	ldi	r27, 0x04	; 4
    1526:	a6 95       	lsr	r26
    1528:	97 95       	ror	r25
    152a:	87 95       	ror	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	ba 95       	dec	r27
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0x86>
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 05       	cpc	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	08 95       	ret
    153c:	9b 01       	movw	r18, r22
    153e:	ac 01       	movw	r20, r24
    1540:	0a 2e       	mov	r0, r26
    1542:	06 94       	lsr	r0
    1544:	57 95       	ror	r21
    1546:	47 95       	ror	r20
    1548:	37 95       	ror	r19
    154a:	27 95       	ror	r18
    154c:	ba 95       	dec	r27
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__ultoa_invert+0xa2>
    1550:	62 0f       	add	r22, r18
    1552:	73 1f       	adc	r23, r19
    1554:	84 1f       	adc	r24, r20
    1556:	95 1f       	adc	r25, r21
    1558:	a0 1d       	adc	r26, r0
    155a:	08 95       	ret

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
